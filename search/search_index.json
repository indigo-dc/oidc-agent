{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#oidc-agent","title":"oidc-agent","text":"<p>oidc-agent is a set of tools to manage OpenID Connect tokens and make them easily usable  from the command line. We followed the <code>ssh-agent</code> design, so users can  handle OIDC tokens in a similar way as they do with ssh keys. </p> <p><code>oidc-agent</code> is usually started in the beginning of an X-session or a login session.  Through use of environment variables the agent can be located and used to handle  OIDC tokens.</p> <p>The agent initially does not have any account configurations loaded.  You can load an account configuration by using <code>oidc-add</code>.  Multiple account configurations may be loaded in <code>oidc-agent</code> concurrently.  <code>oidc-add</code> is also used to remove a loaded configuration from <code>oidc-agent</code>. <code>oidc-gen</code> is used to initially generate an account configurations file (Help for different providers).</p> <p>We have a low-traffic mailing list with updates such as critical security incidents and new releases: Subscribe oidc-agent-user</p> <p>Current releases are available at GitHub or http://repo.data.kit.edu/</p>"},{"location":"oidc-agent5/","title":"Migrating to oidc-agent 5","text":""},{"location":"oidc-agent5/#migrating-to-oidc-agent-5","title":"Migrating to oidc-agent 5","text":"<p>oidc-agent 5 is a major release with quite some usability improvements but unfortunately also some breaking changes. However, most things should just work as you are used to.</p> <p>All users of <code>oidc-agent-service</code> (this includes the default integration into the system on Linux) need to make a little adjustment to be able to access the new agent from existing terminal sessions. The socket path location of <code>oidc-agent-service</code> was changed, therefore the old location has be linked to the new one. After restarting the agent with <code>eval $(oidc-agent-service restart)</code>, run the following commands:</p> <pre><code>rm -rf /tmp/oidc-agent-service/${UID}/\nln -s /tmp/oidc-agent-service-${UID} /tmp/oidc-agent-service/${UID}\n</code></pre> <p>While we recommend to take a few minutes to configure version 5 of oidc-agent, so it suits your needs best, further adaptions are not required. After restarting the agent you could just use version 5 of oidc-agent as you are used to without any modifications.</p> <p>Nevertheless, it is a good idea to go through the following points:</p>"},{"location":"oidc-agent5/#adapt-configuration","title":"Adapt Configuration","text":"<p>Copy the new global configuration file <code>/etc/oidc-agent/config</code> to your user's oidc-agent directory (<code>~/.config/oidc-agent</code> or <code>~/.oidc-agent</code>). Go through the file and adapt it to your needs - but of course you can also keep the default configuration; the default configuration represents what you are used to from oidc-agent 4 (you can also delete entries that you do not change, but you don't have to).</p> <p>One option we would like to draw your attention to is the <code>default_gpg_key</code> option under <code>oidc-gen</code>. If you set a gpg key id there, all newly created account configurations will be encrypted with that gpg key. No encryption passwords are needed.</p>"},{"location":"oidc-agent5/#statistics","title":"Statistics","text":"<p>Version 5 of oidc-agent can collect information about the requests it receives and build up a request log. If you share this data with us, we can better understand how oidc-agent is used by our users and improve it further. All information collected is completely anonymized and no security sensitive data is collected. You can check yourself what information is collected by looking into the $OIDCDIR/oidc-agent.stats file. In our opinion, the most sensitive piece of information is the <code>country</code> where you use oidc-agent. Collection of this claim can be disabled/enabled separately.</p> <p>By default, no information is collected. Requests logs are only collected by the agent if the <code>stats_collect_local</code> is set to <code>true</code> in the config file. Furthermore, these are only shared with us if additionally the <code>stats_collect_share</code> option is set to <code>true</code>. Collection of the request country can be controlled with the <code>stats_collect_location</code> option.</p> <p>Since it really helps us to get a better understanding on how oidc-agent is used in practice we kindly ask you to enable the collection and sharing of these information.</p> <p>An example request entry looks the following:</p> <pre><code>{\n  \"machine_id\": \"0000000fbf182739b3849d8200000000_1000\",\n  \"boot_id\": \"00000000-b84b-4f7d-b8f2-600000000000_1000\",\n  \"os_info\": \"Linux 6.1.0-10-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.38-2 (2023-07-27) x86_64 GNU/Linux\",\n  \"time\": 1693301191,\n  \"lt_offset\": 7200,\n  \"agent_version\": \"5.0.0\",\n  \"country\": \"DE\",\n  \"request\": \"access_token\",\n  \"account\": \"kit\",\n  \"application_hint\": \"oidc-token\",\n  \"min_valid_period\": 0\n}\n</code></pre>"},{"location":"oidc-agent5/#restart-the-agent","title":"Restart the agent","text":"<p>It's now time to restart your agent with the new version 5.</p> <pre><code>eval `oidc-agent-service restart`\n</code></pre>"},{"location":"oidc-agent5/#load-your-accounts","title":"Load your accounts","text":"<p>While this is not required, we recommend you to load all your accounts once after migrating to version 5. This way the agent can build the new <code>issuer.config</code> file in your oidc-agent directory and map all your account configs to the correct issuer. This is useful when clients request access tokens for an issuer rather than for a specific account config.</p>"},{"location":"oidc-agent5/#update-encryption","title":"Update encryption","text":"<p>If you configured a default gpg key in the config and want to migrate existing password encrypted account configs to gpg-based encryption you can do so by running</p> <pre><code>oidc-gen -u &lt;shortname&gt;\n</code></pre> <p>for each of the relevant account configs.</p>"},{"location":"oidc-agent5/#special-issuer-needs","title":"Special Issuer Needs?","text":"<p>If you want to configure different behavior for some issuers have a look at the <code>issuer.config</code> file. If you make changes, please restart the agent again.</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>After installation the agent has to be started. Usually the agent is started on system startup and is then available on all terminals (see integration). Therefore, after installation the options are to restart your X-Session or to start the agent manually.</p> <pre><code>eval `oidc-agent-service use`\n</code></pre> <p>This starts the agent and sets the required environment variables.</p>"},{"location":"quickstart/#create-an-agent-account-configuration-with-oidc-gen","title":"Create an agent account configuration with oidc-gen","text":"<p>For most OpenID Connect providers an agent account configuration can be created with one of the following calls. Make sure that you can run a web-browser on the same host where you run the <code>oidc-gen</code> command.</p> <pre><code>oidc-gen &lt;shortname&gt;\noidc-gen --pub &lt;shortname&gt;\n</code></pre> <p>For more information on the different providers refer to integrate with different providers.</p> <p>After an account configuration is created it can be used with the shortname to obtain access tokens. One does not need to run <code>oidc-gen</code> again unless to update or create a new account configuration.</p>"},{"location":"quickstart/#use-oidc-add-to-load-an-account-configuration","title":"Use oidc-add to load an account configuration","text":"<pre><code>oidc-add &lt;shortname&gt;\n</code></pre> <p>However, usually it is not necessary to load an account configuration with <code>oidc-add</code>. One can directly request an access token for a configuration and <code>oidc-agent</code> will automatically load it if it is not already loaded.</p>"},{"location":"quickstart/#obtaining-an-access-token","title":"Obtaining an access token","text":"<pre><code>oidc-token &lt;shortname&gt;\n</code></pre> <p>Alternatively, it is also possible to request an access token without specifying the shortname of a configuration but with the issuer url:</p> <pre><code>oidc-token &lt;issuer_url&gt;\n</code></pre> <p>This way is recommended when writing scripts that utilize oidc-agent to obtain access tokens. This allows that the script can be easily used by others without them having to update the shortname.</p>"},{"location":"quickstart/#list-existing-configuration","title":"List existing configuration","text":"<pre><code>oidc-add -l\noidc-gen -l\n</code></pre> <p>These commands both give a list of all existing account configurations.</p> <p>A list of the currently loaded accounts can be retrieved with:</p> <pre><code>oidc-add -a\n</code></pre>"},{"location":"quickstart/#updating-an-existing-account-configuration","title":"Updating an existing account configuration","text":"<p>An existing account configuration can be updated with <code>oidc-gen</code>:</p> <pre><code>oidc-gen -m &lt;shortname&gt;\n</code></pre>"},{"location":"quickstart/#reauthenticating","title":"Reauthenticating","text":"<p>If the refresh token stored in the account configuration expired a new one must be created. However, it is not required to create a new account configuration, it is enough to run:</p> <pre><code>oidc-gen &lt;shortname&gt; --reauthenticate\n</code></pre>"},{"location":"tips/","title":"Tips","text":"<p>Here we want to share some useful tips on how <code>oidc-agent</code> and the other components can be used in your everyday work.</p> <ul> <li>Xsession Integration</li> <li>Command Line Integration of oidc-token</li> <li>Obtaining More Information From oidc-token</li> <li>Autoloading and Autounloading Account Configurations</li> <li>Obtaining access tokens on a server</li> <li>Updating an Expired Refresh Token</li> <li>Applications that run under another user</li> <li>Non-interactive oidc-gen</li> </ul>"},{"location":"tips/#xsession-integration","title":"Xsession Integration","text":"<p>See Xsession Integration.</p>"},{"location":"tips/#agent-forwarding","title":"Agent Forwarding","text":"<p>See Agent Forwarding.</p>"},{"location":"tips/#using-oidc-token-with-an-issuer-instead-of-the-shortname","title":"Using oidc-token With an Issuer Instead of the Shortname","text":"<p>Instead of using <code>oidc-token &lt;shortname&gt;</code> you also can do <code>oidc-token &lt;issuer_url&gt;</code>. Usually the usage of the shortname is shorter than using the whole issuer url. However, there are use cases where this option might be quite useful. Generally it is a more universal way to obtain an access token for a specific provider. While <code>oidc-token mySuperFancyShortname</code> might work on your machine it can fail for other users because they do not have <code>mySuperFancyShortname</code>. Using the issuer url</p> <ul> <li>when writing scripts that are shared with other users,</li> <li>opening issues that mention calls to <code>oidc-token</code>, or</li> <li>sharing other <code>oidc-token</code> related commands makes it easier for other users to run the same commands without any   changes.</li> </ul>"},{"location":"tips/#command-line-integration-of-oidc-token","title":"Command Line Integration of oidc-token","text":"<p>If you have to pass an access token to another application on the command line you can substitute the token with <code>` oidc-token &lt;shortname&gt;`</code>. E.g. you can do an <code>curl</code> call with an OIDC token in the authorization header:</p> <pre><code>curl example.com -H 'Authorization: Bearer `oidc-token &lt;shortname&gt;`'\n</code></pre> <p>This syntax can be used with many applications and is quite useful.</p>"},{"location":"tips/#obtaining-more-information-from-oidc-token","title":"Obtaining More Information From oidc-token","text":"<p>As described under oidc-token you can obtain more information when calling <code>oidc-token</code> and not only the access token. If you want to do this we recommend the <code>--env</code> option and call <code>oidc-token</code> the following way: <code>eval `oidc-token --env &lt;shortname&gt;`</code>. This way the environment variables <code>OIDC_AT</code> , <code>OIDC_ISS</code>, and <code>OIDC_EXP</code> or populated with the correct values.</p> <p>A way that is not recommended, is to do multiple successive calls to <code>oidc-token</code> and only providing one of the <code>--token</code>, <code>--issuer</code>, <code>--expires-at</code> options on each call. This would make three independent token requests to <code>oidc-agent</code>. This is not only inefficient but also does not guarantee to return correct results. It might happen that the token requested in the first call is only valid for a very short time and not valid anymore when doing the last request; in this case a new token will be requested that has a different expiration time that does not relate to the token from the first call.</p>"},{"location":"tips/#autoloading-and-autounloading-account-configurations","title":"Autoloading and Autounloading Account Configurations","text":"<p>Since version <code>2.3.0</code> there is support for the so called <code>autoload</code> of account configurations. If an application requests an access token for an configuration that is not loaded, it can be automatically loaded. The user will be prompted to enter the encryption password for this account configuration and through that can decide if the account should be loaded or not. This means we can do a call to <code>oidc-token example</code> and even if <code>example</code> is currently not loaded, it will be loaded and an access token is returned.</p> <p>The autoloading feature makes it quite easy to also use the autounload (limited lifetime of account configuration). When starting <code>oidc-agent</code> with the <code>--lifetime</code> option you can specify for how long account configuration should be loaded (the default is forever). However, we now can use a limit and load account configuration only for e.g. 300 seconds. After that time the account configuration will automatically be removed from the agent. But if an application needs an access token for an account configuration it can be easy loaded through the autoload feature.</p> <p>This way the time sensitive information is kept in memory by <code>oidc-agent</code> can be limited without reducing usability much (the user does not always have to run <code>oidc-add</code>). Of course there are use cases where the autounload-autoload combination is not useful, e.g. if a script runs periodically and needs an access token and should run with no user interaction at all.</p>"},{"location":"tips/#obtaining-access-tokens-on-a-server","title":"Obtaining access tokens on a server","text":"<p><code>oidc-agent</code> could be run on a remote server and then be used as usual to obtain access tokens. However, if you are planning to do this, you should check your use case, if this is really necessary and if there might be a better solution. Usually on of the following is a better solution::</p> <ul> <li>Agent forwarding can be used to access a local agent on a remote server.</li> <li>The mytoken service is probably what you want.</li> </ul> <p>When running oidc-agent on a server to obtain tokens, generating a new account configuration file on that server can be more difficult, because there is neither a webbrowser nor a desktop environment. But because oidc-agent is designed for command line usage, it is still possible. There are several ways of generating a new account configuration on a remote server:</p> <ol> <li>Generate it locally and copy it to the remote server</li> <li>Using the password flow, which can be done entirely on the command line</li> <li>Using the device flow, where a second device is used for the web-based authentication.</li> <li>Using the authorization code flow with a 'manual redirect'</li> </ol> <p>Options 2 and 3 are not supported by all providers. However, if the device flow is supported by your provider, we recommend option 3.</p> <p>When doing option 4 you should be aware of the following:</p> <ul> <li>Make sure that the agent uses the <code>--no-webserver</code> and <code>--no-scheme</code> options or pass these options to <code>oidc-gen</code></li> <li>Also add the <code>--no-url-call</code> option when calling <code>oidc-gen</code></li> <li>Copy the printed authorization url and open it in a browser (local).</li> <li>Authenticate and authorize oidc-agent as usual</li> <li>You will be redirected to localhost. Because there is no webserver listening your browser will display an error   message.</li> <li>Copy the url to which you are redirected from the address bar of your browser</li> <li>Head over to the remote server and pass the copied url to <code>oidc-gen</code> in the following call:</li> </ul> <pre><code>oidc-gen --code-exchange='&lt;url&gt;'\n</code></pre>"},{"location":"tips/#updating-an-expired-refresh-token","title":"Updating an Expired Refresh Token","text":"<p>If a refresh token expired the user has to re-authenticate to obtain a new valid refresh token. Until version <code>2.3.0</code> this would require the user to use <code>oidc-gen -m &lt;shortname&gt;</code>, which allows the user to change all data of this account configuration (and therefore has to confirm all existing data). Because the user only wants to re-authenticate to update the refresh token, confirming, that all other data should be unchanged, is annoying.</p> <p>Instead use <code>oidc-gen --reauthenticate &lt;shortname&gt;</code>. This option will only start the re-authentication and update the refresh token. Easier and faster.</p>"},{"location":"tips/#applications-that-run-under-another-user","title":"Applications that run under another user","text":"<p>On default only applications that run under the same user that also started the agent can obtain tokens from it. Whens tarting the agent the <code>--with-group</code> option can be used to allow other applications to also access the agent. This can be useful in cases where applications must run under a specific user.</p> <p>The user first has to create a group (e.g. named <code>oidc-agent</code>) and add himself and all other users that need access to the agent to this group. It is the user's responsibility to manage this group. Then he can pass the group name to the <code>--with-group</code> option to allow all group members access to the agent. If the option is used without providing a group name, the default is <code>oidc-agent</code>.</p>"},{"location":"tips/#non-interactive-oidc-gen","title":"Non-interactive oidc-gen","text":"<p>To run <code>oidc-gen</code> completely non-interactively (i.e. without user interaction) one needs to pass several parameters:</p> <ul> <li>Pass all required information with command line arguments, e.g. <code>--iss</code>,   <code>--scope</code></li> <li>Use <code>--prompt=none</code> to disable prompting</li> <li>Use <code>--pw-file</code> or <code>--pw-cmd</code> to pass an encryption password</li> <li>Use <code>--confirm-default</code>, <code>--confirm-yes</code> or <code>--confirm-no</code> to automatically confirm with the default, yes or no.</li> </ul>"},{"location":"api/","title":"API","text":"<p>If you want to use <code>oidc-agent</code> to easily obtain an access token in your application you can choose between  - liboidc-agent4: Library for the C programming language, - liboidcagent-go: Library for the Go programming language, - liboidcagent-py: Library for the Python programming language, - IPC-API: Communicate directly with <code>oidc-agent</code>.</p> <p>When you have integrated your application with <code>oidc-agent</code> you can contact us at oidc-agent-contact@lists.kit.edu and we will add your application to the list of agent clients.</p>"},{"location":"api/agent-clients/","title":"Other agent clients","text":"<p>Any application that needs an access token can use on of the provided <code>libraries</code> or our IPC-API to obtain an access token from oidc-agent. The following applications are already integrated with oidc-agent:</p> <ul> <li>wattson</li> <li>orchent</li> <li>UNICORE command line client</li> <li>feudalSSH</li> <li>mccli</li> <li>fedcloud client</li> <li>FLAAT</li> <li>dcacheclient</li> <li>CYGNO Library</li> <li>EGI Swift Finder</li> <li>DODAS-TS/rclone</li> <li>OSCAR-CLI</li> </ul>"},{"location":"api/api-c/","title":"liboidc-agent5","text":""},{"location":"api/api-c/#liboidc-agent5","title":"liboidc-agent5","text":"<p>The C-API provides functions for getting an access token for a specific configuration as well as the associated issuer. These functions are designed for easy usage. The C-API is available as a shared library through the <code>liboidc-agent5</code> package. The developement files (i.e. header-files) and the static library are included in the <code>liboidc-agent-dev</code> package.</p> <p>The library depends on <code>libsodium</code> therefore the <code>-lsodium</code> linker flag must be included when linking <code>liboidc-agent</code>. If the library was build with <code>liblist</code> then <code>-llist</code> must be included. If the library was build with <code>libcjson</code> then <code>-lcjson</code> must be included. On modern distros this is usually the case.</p>"},{"location":"api/api-c/#requesting-an-access-token-for-an-account-configuration","title":"Requesting an Access Token For an Account Configuration","text":"<p>The following functions can be used to obtain an access token for a specific account configuration from <code>oidc-agent</code>. If you / your application does not know which account configuration should be used, but you know for which provider you need an access token you can also request an access token for a provider.</p>"},{"location":"api/api-c/#getaccesstoken","title":"getAccessToken","text":"<p>It is recommended to use <code>getAgentTokenResponse</code> instead.</p> <pre><code>char* getAccessToken(const char* accountname, time_t min_valid_period,\n                     const char* scope, const char* application_hint,\n                     const char* audience)\n</code></pre> <p>This function requests an access token from oidc-agent for the <code>accountname</code> account configuration. The access token should have <code>scope</code> scopes, be valid for at least <code>min_valid_period</code> seconds, and have the <code>audience</code> audience.</p>"},{"location":"api/api-c/#parameters","title":"Parameters","text":"<ul> <li><code>accountname</code> is the shortname of the account configuration that should be used.</li> <li>If <code>min_valid_period</code> is   <code>0</code> no guarantee about the validity of the token can be made; it is possible that it expires before it can be used.</li> <li>If <code>scope</code> is <code>NULL</code>, the default scopes for that account are used. So usually it is enough to use <code>NULL</code>.</li> <li><code>application_hint</code> should be the name of the application that requests an access token. This string might be displayed   to the user for authorization purposes.</li> <li>If <code>audience</code> is <code>NULL</code>, no special audience is requested for this access token. This parameter is used to request an   access token with a specific audience.</li> </ul>"},{"location":"api/api-c/#return-value","title":"Return Value","text":"<p>The function returns only the access token as a <code>char*</code>. To additionally obtain other information use <code>getAgentTokenResponse</code>. After usage the return value MUST be freed using <code>secFree</code>.</p> <p>On failure <code>NULL</code> is returned and <code>oidc_errno</code> is set (see Error Handling).</p>"},{"location":"api/api-c/#example","title":"Example","text":"<p>A complete example can look the following:</p> <pre><code>char* token = getAccessToken(accountname, 60, NULL,\n\"example-app\", NULL);\nif(token == NULL) {\n  oidcagent_perror();\n  // Additional error handling\n} else {\n  printf(\"Access token is: %s\\n\", token);\n  secFree(token);\n}\n</code></pre>"},{"location":"api/api-c/#getagenttokenresponse","title":"getAgentTokenResponse","text":"<pre><code>struct agent_response getAgentTokenResponse(const char* accountname,\n                                        time_t      min_valid_period,\n                                        const char* scope,\n                                        const char* application_hint,\n                                        const char* audience)\n</code></pre> <p>This function requests an access token from oidc-agent for the <code>accountname</code> account configuration. The access token should have <code>scope</code> scopes, be valid for at least <code>min_valid_period</code> seconds, and have the <code>audience</code> audience.</p>"},{"location":"api/api-c/#parameters_1","title":"Parameters","text":"<ul> <li><code>accountname</code> is the shortname of the account configuration that should be used.</li> <li>If <code>min_valid_period</code> is   <code>0</code> no guarantee about the validity of the token can be made; it is possible that it expires before it can be used.</li> <li>If <code>scope</code> is <code>NULL</code>, the default scopes for that account are used. So usually it is enough to use <code>NULL</code>.</li> <li><code>application_hint</code> should be the name of the application that requests an access token. This string might be displayed   to the user for authorization purposes.</li> <li>If <code>audience</code> is <code>NULL</code>, no special audience is requested for this access token. This parameter is used to request an   access token with a specific audience.</li> </ul>"},{"location":"api/api-c/#return-value_1","title":"Return Value","text":"<p>The function returns an <code>agent_response struct</code>. The <code>type</code> element indicates which type is returned, i.e. if an error occurred. On success the response has a <code>token_response struct</code> that contains the requested access token, the url of the issuer that issued the token and the time when the token expires (in seconds since the Epoch, <code>1970-01-01 00:00:00 +0000 (UTC)</code>).</p> <p>The values can be accessed the following way:</p> <pre><code>struct agent_response response = getAgentTokenResponse(...);\nif (response.type == AGENT_RESPONSE_TYPE_TOKEN) { // assert that we actually have a token response\n    struct token_response tok_res = response.token_response;\n    tok_res.token      // access token\n    tok_res.issuer     // issuer url\n    tok_res.expires_at // expiration time\n}\n</code></pre> <p>After usage the return value MUST be freed using <code>secFreeAgentResponse</code>.</p> <p>On failure <code>response.type</code> will be <code>AGENT_RESPONSE_TYPE_ERROR</code> and <code>response.error_response</code> can be accessed (see Error Handling). So applications should check <code>response.type</code> before accessing any of the token response values.</p>"},{"location":"api/api-c/#example_1","title":"Example","text":"<p>A complete example can look the following:</p> <pre><code>struct agent_response response = getAgentTokenResponse(accountname, 60, NULL,\n\"example-app\", NULL);\nif(response.type == AGENT_RESPONSE_TYPE_ERROR) {\n    oidcagent_printErrorResponse(response.error_response);\n    // Additional error handling\n} else {\n    struct token_response tok_res = response.token_response;\n    printf(\"Access token is: %s\\n\", tok_res.token);\n    printf(\"Issuer url is: %s\\n\", tok_res.issuer);\n    printf(\"Token expires at: %lu\\n\", tok_res.expires_at);\n}\nsecFreeAgentResponse(response);\n</code></pre>"},{"location":"api/api-c/#requesting-an-access-token-for-a-provider","title":"Requesting an Access Token For a Provider","text":"<p>The <code>getAccessTokenForIssuer</code> and <code>getAgentTokenResponseForIssuer</code> methods can be used to obtain an access token for a specific OpenID Provider (issuer). This is useful for applications that only work with a specific provider and therefore know the issuer for which they need an access token, but do not require the user to provide an account configuration shortname.</p>"},{"location":"api/api-c/#getaccesstokenforissuer","title":"getAccessTokenForIssuer","text":"<pre><code>char* getAccessTokenForIssuer(const char* issuer_url, time_t min_valid_period,\n                              const char* scope, const char* application_hint,\n                              const char* audience)\n</code></pre> <p>This function requests an access token from oidc-agent for the provider with <code>issuer_url</code>. The access token should have <code>scope</code> scopes, be valid for at least <code>min_valid_period</code> seconds, and have the <code>audience</code> audience.</p>"},{"location":"api/api-c/#parameters_2","title":"Parameters","text":"<ul> <li><code>issuer_url</code> is the issuer url of the provider for which an access token should be obtained.</li> <li>If <code>min_valid_period</code> is   <code>0</code> no guarantee about the validity of the token can be made; it is possible that it expires before it can be used.</li> <li>If <code>scope</code> is <code>NULL</code>, the default scopes for that account are used. So usually it is enough to use <code>NULL</code>.</li> <li><code>application_hint</code> should be the name of the application that requests an access token. This string might be displayed   to the user for authorization purposes.</li> <li>If <code>audience</code> is <code>NULL</code>, no special audience is requested for this access token. This parameter is used to request an   access token with a specific audience.</li> </ul>"},{"location":"api/api-c/#return-value_2","title":"Return Value","text":"<p>The function returns only the access token as a <code>char*</code>. To additionally obtain other information use <code>getAgentTokenResponseForIssuer</code>. After usage the return value MUST be freed using <code>secFree</code>.</p> <p>On failure <code>NULL</code> is returned and <code>oidc_errno</code> is set (see Error Handling).</p>"},{"location":"api/api-c/#example_2","title":"Example","text":"<p>A complete example can look the following:</p> <pre><code>char* token = getAccessTokenForIssuer(\"https://example.com/\", 60, NULL,\n\"example-app\", NULL);\nif(token == NULL) {\n  oidcagent_perror();\n  // Additional error handling\n} else {\n  printf(\"Access token is: %s\\n\", token);\n  secFree(token);\n}\n</code></pre>"},{"location":"api/api-c/#getagenttokenresponseforissuer","title":"getAgentTokenResponseForIssuer","text":"<pre><code>struct agent_response getAgentTokenResponseForIssuer(const char* issuer_url,\n                                                 time_t      min_valid_period,\n                                                 const char* scope,\n                                                 const char* application_hint,\n                                                 const char* audience)\n</code></pre> <p>This function requests an access token from oidc-agent for the the provider with <code>issuer_url</code>. The access token should have <code>scope</code> scopes, be valid for at least <code>min_valid_period</code> seconds, and have the <code>audience</code> audience.</p>"},{"location":"api/api-c/#parameters_3","title":"Parameters","text":"<ul> <li><code>issuer_url</code> is the issuer url of the provider for which an access token should be obtained.</li> <li>If <code>min_valid_period</code> is   <code>0</code> no guarantee about the validity of the token can be made; it is possible that it expires before it can be used.</li> <li>If <code>scope</code> is <code>NULL</code>, the default scopes for that account are used. So usually it is enough to use <code>NULL</code>.</li> <li><code>application_hint</code> should be the name of the application that requests an access token. This string might be displayed   to the user for authorization purposes.</li> <li>If <code>audience</code> is <code>NULL</code>, no special audience is requested for this access token. This parameter is used to request an   access token with a specific audience.</li> </ul>"},{"location":"api/api-c/#return-value_3","title":"Return Value","text":"<p>The function returns an <code>agent_response struct</code>. The <code>type</code> element indicates which type is returned, i.e. if an error occurred. On success the response has a <code>token_response struct</code> that contains the requested access token, the url of the issuer that issued the token and the time when the token expires (in seconds since the Epoch, <code>1970-01-01 00:00:00 +0000 (UTC)</code>).</p> <p>The values can be accessed the following way:</p> <pre><code>struct agent_response response = getAgentTokenResponseForIssuer(...);\nif (response.type == AGENT_RESPONSE_TYPE_TOKEN) { // assert that we actually have a token response\n    struct token_response tok_res = response.token_response;\n    tok_res.token      // access token\n    tok_res.issuer     // issuer url\n    tok_res.expires_at // expiration time\n}\n</code></pre> <p>After usage the return value MUST be freed using <code>secFreeAgentResponse</code>.</p> <p>On failure <code>response.type</code> will be <code>AGENT_RESPONSE_TYPE_ERROR</code> and <code>response.error_response</code> can be accessed (see Error Handling). So applications should check <code>response.type</code> before accessing any of the token response values.</p>"},{"location":"api/api-c/#example_3","title":"Example","text":"<p>A complete example can look the following:</p> <pre><code>struct agent_response response = getAgentTokenResponseForIssuer(\"https://oidc.example.com\", 60, NULL,\n\"example-app\", NULL);\nif(response.type == AGENT_RESPONSE_TYPE_ERROR) {\n    oidcagent_printErrorResponse(response.error_response);\n    // Additional error handling\n} else {\n    struct token_response tok_res = response.token_response;\n    printf(\"Access token is: %s\\n\", tok_res.token);\n    printf(\"Issuer url is: %s\\n\", tok_res.issuer);\n    printf(\"Token expires at: %lu\\n\", tok_res.expires_at);\n}\nsecFreeAgentResponse(response);\n</code></pre>"},{"location":"api/api-c/#requesting-a-mytoken","title":"Requesting a Mytoken","text":""},{"location":"api/api-c/#getagentmytokenresponse","title":"getAgentMytokenResponse","text":"<pre><code>struct agent_response getAgentMytokenResponse(const char* accountname,\n                                        const char* mytoken_profile,\n                                        const char* application_hint)\n</code></pre> <p>This function requests mytoken from oidc-agent for the <code>accountname</code> mytoken account configuration. The mytoken should have the properties defined by the passed <code>mytoken_profile</code>.</p>"},{"location":"api/api-c/#parameters_4","title":"Parameters","text":"<ul> <li><code>accountname</code> is the shortname of the account configuration that should be used.</li> <li><code>mytoken_profile</code> is a mytoken profile describing the   properties of the requested mytoken.</li> <li><code>application_hint</code> should be the name of the application that requests the mytoken. This string might be displayed to   the user for authorization purposes.</li> </ul>"},{"location":"api/api-c/#return-value_4","title":"Return Value","text":"<p>The function returns an <code>agent_response struct</code>. The <code>type</code> element indicates which type is returned, i.e. if an error occurred. On success the response has a <code>mytoken_response struct</code> that contains the requested mytoken as well as several additional information.</p> <p>The values can be accessed the following way:</p> <pre><code>struct agent_response response = getAgentMytokenResponse(...);\nif (response.type == AGENT_RESPONSE_TYPE_MYTOKEN) { // assert that we actually have a mytoken response\n    struct mytoken_response tok_res = response.mytoken_response;\n    tok_res.token      // mytoken\n    tok_res.token_type;  // Type of the mytoken as returned from the mytoken server\n    tok_res.mytoken_issuer; // Issuer url of the mytoken server that issued the mytoken\n    tok_res.oidc_issuer; // Issuer url of the OpenID Provider that issues the access tokens for this mytoken\n    tok_res.restrictions;           // Mytoken restrictions as JSON\n    tok_res.capabilities;           // The mytokens capabilities as JSON Array\n    tok_res.rotation;               // The rotation policy for this mytoken as JSON\n    tok_res.expires_at; // The time when this mytoken expires\n\n}\n</code></pre> <p>After usage the return value MUST be freed using <code>secFreeAgentResponse</code>.</p> <p>On failure <code>response.type</code> will be <code>AGENT_RESPONSE_TYPE_ERROR</code> and <code>response.error_response</code> can be accessed (see Error Handling). So applications should check <code>response.type</code> before accessing any of the token response values.</p>"},{"location":"api/api-c/#example_4","title":"Example","text":"<p>A complete example can look the following:</p> <pre><code>struct agent_response response = getAgentMytokenResponse(accountname, NULL, \"example-app\");\nif(response.type == AGENT_RESPONSE_TYPE_ERROR) {\n    oidcagent_printErrorResponse(response.error_response);\n    // Additional error handling\n} else {\n    struct mytoken_response tok_res = response.mytoken_response;\n    printf(\"Mytoken is: %s\\n\", tok_res.token);\n    printf(\"Useable at: %s\\n\", tok_res.mytoken_issuer);\n    printf(\"For provider: %lu\\n\", tok_res.oidc_issuer);\n}\nsecFreeAgentResponse(response);\n</code></pre>"},{"location":"api/api-c/#getmytoken","title":"getMytoken","text":"<pre><code>char* getMytoken(const char* accountname, const char* mytoken_profile, const char* application_hint)\n</code></pre> <p>This function requests mytoken from oidc-agent for the <code>accountname</code> mytoken account configuration. The mytoken should have the properties defined by the passed <code>mytoken_profile</code>.</p>"},{"location":"api/api-c/#parameters_5","title":"Parameters","text":"<ul> <li><code>accountname</code> is the shortname of the account configuration that should be used.</li> <li><code>mytoken_profile</code> is a mytoken profile describing the   properties of the requested mytoken.</li> <li><code>application_hint</code> should be the name of the application that requests the mytoken. This string might be displayed to   the user for authorization purposes.</li> </ul>"},{"location":"api/api-c/#return-value_5","title":"Return Value","text":"<p>The function returns only the mytoken as a <code>char*</code>. To additionally obtain other information use <code>getAgentMytokenResponse</code>. After usage the return value MUST be freed using <code>secFree</code>.</p> <p>On failure <code>NULL</code> is returned and <code>oidc_errno</code> is set (see Error Handling).</p>"},{"location":"api/api-c/#example_5","title":"Example","text":"<p>A complete example can look the following:</p> <pre><code>char* token = getMytoken(accountname, NULL, \"example-app\");\nif(token == NULL) {\n  oidcagent_perror();\n  // Additional error handling\n} else {\n  printf(\"Mytoken is: %s\\n\", token);\n  secFree(token);\n}\n</code></pre>"},{"location":"api/api-c/#getting-a-list-of-loaded-accounts","title":"Getting a List of Loaded Accounts","text":"<p>The <code>getLoadedAccountsList</code> and <code>getAgentLoadedAccountsListResponse</code> functions can be used to obtain a list of account configurations that are currently loaded in the agent. This can be used to show users a list from which they can choose an account config to use. It is not necessary to check if an account is loaded through this function before requesting tokens for it.</p> <p>LIB_PUBLIC char* getLoadedAccountsList(); LIB_PUBLIC struct agent_response getAgentLoadedAccountsListResponse();</p>"},{"location":"api/api-c/#getagentloadedaccountslistresponse","title":"getAgentLoadedAccountsListResponse","text":"<pre><code>struct agent_response getAgentLoadedAccountsListResponse()\n</code></pre> <p>This function requests the list of currently loaded accounts from oidc-agent.</p>"},{"location":"api/api-c/#return-value_6","title":"Return Value","text":"<p>The function returns an <code>agent_response struct</code>. The <code>type</code> element indicates which type is returned, i.e. if an error occurred. On success the response has a <code>loaded_accounts_response struct</code> that contains the loaded accounts.</p> <p>The value can be accessed the following way:</p> <pre><code>struct agent_response response = getAgentLoadedAccountsListResponse(...);\nif (response.type == AGENT_RESPONSE_TYPE_ACCOUNTS) { // assert that we actually have a accounts response\n    struct loaded_accounts_response acc_res = response.loaded_accounts_response;\n    acc_res.accounts      // loaded accounts as a space delimited string\n}\n</code></pre> <p>After usage the return value MUST be freed using <code>secFreeAgentResponse</code>.</p> <p>On failure <code>response.type</code> will be <code>AGENT_RESPONSE_TYPE_ERROR</code> and <code>response.error_response</code> can be accessed (see Error Handling). So applications should check <code>response.type</code> before accessing any of the token response values.</p>"},{"location":"api/api-c/#example_6","title":"Example","text":"<p>A complete example can look the following:</p> <pre><code>struct agent_response response = getAgentLoadedAccountsListResponse();\nif(response.type == AGENT_RESPONSE_TYPE_ERROR) {\n    oidcagent_printErrorResponse(response.error_response);\n    // Additional error handling\n} else {\n    struct token_response acc_res = response.loaded_accounts_response;\n    printf(\"The following accounts are loaded: %s\\n\", acc_res.accounts);\n}\nsecFreeAgentResponse(response);\n</code></pre>"},{"location":"api/api-c/#getloadedaccountslist","title":"getLoadedAccountsList","text":"<pre><code>char* getLoadedAccountsList()\n</code></pre> <p>This function requests the list of currently loaded accounts from oidc-agent.</p>"},{"location":"api/api-c/#return-value_7","title":"Return Value","text":"<p>The function returns the loaded accounts as a space delimited string <code>char*</code>. To additionally obtain other information ( extended error information) use <code>getAgentLoadedAccountsListResponse</code>. After usage the return value MUST be freed using <code>secFree</code>.</p> <p>On failure <code>NULL</code> is returned and <code>oidc_errno</code> is set (see Error Handling).</p>"},{"location":"api/api-c/#example_7","title":"Example","text":"<p>A complete example can look the following:</p> <pre><code>char* accounts = getLoadedAccountsList();\nif(accounts == NULL) {\n  oidcagent_perror();\n  // Additional error handling\n} else {\n  printf(\"The following accounts are loaded: %s\\n\", accounts);\n  secFree(accounts);\n}\n</code></pre>"},{"location":"api/api-c/#error-handling","title":"Error Handling","text":"<p>Since version <code>4.2.0</code> it is recommended to use functions that return an <code>agent_response struct</code>. This approach is described in Using the Error Response Structure. For functions that do not return an <code>agent_response struct</code> <code>oidc_errno</code> must be used. This approach can also be used in addition to the <code>error_response struct</code>.</p>"},{"location":"api/api-c/#using-the-error-response-structure","title":"Using the Error Response Structure","text":"<p>Since version <code>4.2.0</code> it is recommended to use functions that return an <code>agent_response struct</code>. This struct can hold either a <code>token_response</code> or an <code>agent_error_response</code> depending on the success of the call. The <code>agent_error_response struct</code> holds an error message and MIGHT additionally hold a help message (however, the help message might also be <code>NULL</code>). If the help message is available it SHOULD be displayed to the user, since it gives useful information how the user can solve the problem.</p> <p>Before accessing the <code>agent_error_response struct</code> in an <code>agent_response</code> one MUST ensure that the <code>agent_response.type</code> is <code>AGENT_RESPONSE_TYPE_ERROR</code>. This is also how one checks for the presence of an error.</p> <pre><code>struct agent_response response = getAgentTokenResponse(...);\nif (response.type == AGENT_RESPONSE_TYPE_ERROR) {\n    // error\n    struct agent_error_response err_res = response.error_response;\n    err_res.error // the error message\n    err_res.help // the help message (before using it assert that != NULL\n} else {\n    // success\n}\n</code></pre> <p><code>liboidcagent4</code> also provides a helper function to easily print an <code>agent_error_response</code>:</p> <pre><code>oidcagent_printErrorResponse(response.error_response);\n</code></pre>"},{"location":"api/api-c/#using-oidc_errno","title":"Using <code>oidc_errno</code>","text":"<p>If an error occurs in any API function, <code>oidc_errno</code> is set to an error code. An application might want to check this variable and perform specific actions on some of the errors. A list of important error codes can be found at Error Codes; for all error codes refer to the <code>oidc_error.h</code> header file.</p> <p>In most cases it is enough to print an error message to the user. For that usage <code>liboidc-agent4</code> provides some helper functions:</p> <pre><code>void oidcagent_perror();\nchar* oidcagent_serror();\n</code></pre> <p><code>oidcagent_perror()</code> can be used similar to <code>perror()</code> and prints an error message describing the last occurred error to <code>stderr</code>. <code>oidcagent_serror()</code> returns the string that describes the error without printing it. The return string MUST NOT be freed. This function behaves similar to <code>strerror(errno)</code>.</p>"},{"location":"api/api-c/#error-codes","title":"Error Codes","text":"error code explanation OIDC_SUCCESS success - no error OIDC_EERROR general error - check the error string OIDC_ENOACCOUNT the account is not loaded OIDC_EOIDC an error related to OpenID Connect happened - check the error string OIDC_EENVVAR the environment variable used to locate the agent is not set OIDC_ECONSOCK could not connect to the oidc-agent socket - most likely the agent is not running OIDC_ELOCKED the agent is locked and first has to be unlocked by the user OIDC_EFORBIDDEN the user forbid this action OIDC_EPASS wrong password - might occur if the account was not loaded and the user entered a wrong password in the autoload prompt"},{"location":"api/api-go/","title":"liboidcagent-go","text":"<p>A <code>go</code> library for <code>oidc-agent</code> is available at https://github.com/indigo-dc/liboidcagent-go.</p> <p>To use it in your <code>go</code> application do</p> <pre><code>go get github.com/indigo-dc/liboidc-agent-go\n</code></pre> <p>and include:</p> <pre><code>import \"github.com/indigo-dc/liboidcagent-go\"\n</code></pre>"},{"location":"api/api-go/#requesting-an-access-token","title":"Requesting an Access Token","text":"<p>The following functions can be used to obtain an access token for a specific account configuration or for a given OpenID provider from <code>oidc-agent</code>.</p>"},{"location":"api/api-go/#token-request","title":"Token Request","text":"<p>All functions take a <code>TokenRequest</code> struct. This struct describes the request:</p> <pre><code>// TokenRequest is used to request an access token from the agent\ntype TokenRequest struct {\n    // ShortName that should be used (Can be omitted if IssuerURL is specified)\n    ShortName string\n    // IssuerURL for which an access token should be obtained (Can be omitted\n    // if ShortName is specified)\n    IssuerURL string\n    // MinValidPeriod specifies how long the access token should be valid at\n    // least. The time is given in seconds. Default is 0.\n    MinValidPeriod uint64\n    // The scopes for the requested access token\n    Scopes []string\n    // The audiences for the requested access token\n    Audiences []string\n    // A string describing the requesting application (i.e. its name). It might\n    // be displayed to the user, if the request must be confirmed or an account\n    // configuration loaded.\n    ApplicationHint string\n}\n</code></pre>"},{"location":"api/api-go/#getaccesstoken","title":"GetAccessToken","text":"<pre><code>func GetAccessToken(req TokenRequest) (token string, err error)\n</code></pre> <p>This function requests an access token from oidc-agent according to the passed <code>TokenRequest</code>.</p>"},{"location":"api/api-go/#return-value","title":"Return Value","text":"<p>The function returns only the access token as a <code>string</code> and an error. To additionally obtain other information use <code>GetTokenResponse</code>. On failure an error is returned.</p>"},{"location":"api/api-go/#examples","title":"Examples","text":""},{"location":"api/api-go/#account-configuration-example","title":"Account Configuration Example","text":"<p>A complete example can look the following:</p> <pre><code>token, err := liboidcagent.GetAccessToken(liboidcagent.TokenRequest{\n  ShortName: accountName,\n  MinValidPeriod: 60,\n  Scopes: []string{\"openid\", \"profile\"},\n  ApplicationHint: \"Example-App\",\n})\nif err != nil {\n    var agentError *OIDCAgentError\n    if errors.As(err, &amp;agentError) {\n        fmt.Printf(\"%s\\n\", agentError.ErrorWithHelp())\n    }\n    // Additional error handling\n} else {\n    fmt.Printf(\"Access token is: %s\\n\", token)\n}\n</code></pre>"},{"location":"api/api-go/#issuer-example","title":"Issuer Example","text":"<p>A complete example can look the following:</p> <pre><code>token, err := liboidcagent.GetAccessToken(liboidcagent.TokenRequest{\n  IssuerURL: \"https://openid.example.com\",\n  MinValidPeriod: 60,\n  Scopes: []string{\"openid\", \"profile\"},\n  ApplicationHint: \"Example-App\",\n})\nif err != nil {\n    var agentError *OIDCAgentError\n    if errors.As(err, &amp;agentError) {\n        fmt.Printf(\"%s\\n\", agentError.ErrorWithHelp())\n    }\n    // Additional error handling\n} else {\n    fmt.Printf(\"Access token is: %s\\n\", token)\n}\n</code></pre>"},{"location":"api/api-go/#gettokenresponse","title":"GetTokenResponse","text":"<pre><code>func GetTokenResponse(req TokenRequest) (resp TokenResponse, err error)\n</code></pre> <p>This function requests an access token from oidc-agent according to the passed <code>TokenRequest</code>.</p>"},{"location":"api/api-go/#return-value_1","title":"Return Value","text":"<p>The function returns an <code>TokenResponse struct</code> that contains the requested access token, the url of the issuer that issued the token and the time when the token expires.</p> <p>The values can be accessed the following way:</p> <pre><code>response, err := liboidcagent.GetTokenResponse(...)\nresponse.Token      // access token\nresponse.Issuer     // issuer url\nresponse.ExpiresAt  // expiration time\n</code></pre>"},{"location":"api/api-go/#examples_1","title":"Examples","text":""},{"location":"api/api-go/#account-configuration-example_1","title":"Account Configuration Example","text":"<p>A complete example can look the following:</p> <pre><code>resp, err := liboidcagent.GetTokenResponse(liboidcagent.TokenRequest{\n  ShortName: accountName,\n  MinValidPeriod: 60,\n  Audiences: []string{\"https://storage.example.org\"},\n  ApplicationHint: \"Example-App\",\n})\nif err != nil {\n  var agentError *OIDCAgentError\n  if errors.As(err, &amp;agentError) {\n    fmt.Printf(\"%s\\n\", agentError.ErrorWithHelp())\n  }\n  // Additional error handling\n} else {\n  fmt.Printf(\"Access token is: %s\\n\", resp.Token)\n  fmt.Printf(\"Issuer url is: %s\\n\", resp.Issuer)\n  fmt.Printf(\"The token expires at: %s\\n\", resp.ExpiresAt)\n}\n</code></pre>"},{"location":"api/api-go/#issuer-example_1","title":"Issuer Example","text":"<p>A complete example can look the following:</p> <pre><code>resp, err := liboidcagent.GetTokenResponse(liboidcagent.TokenRequest{\n  Issuer: \"https://openid.example.com\",\n  MinValidPeriod: 60,\n  Audiences: []string{\"https://storage.example.org\"},\n  ApplicationHint: \"Example-App\",\n})\nif err != nil {\n  var agentError *OIDCAgentError\n  if errors.As(err, &amp;agentError) {\n    fmt.Printf(\"%s\\n\", agentError.ErrorWithHelp())\n  }\n  // Additional error handling\n} else {\n  fmt.Printf(\"Access token is: %s\\n\", resp.Token)\n  fmt.Printf(\"Issuer url is: %s\\n\", resp.Issuer)\n  fmt.Printf(\"The token expires at: %s\\n\", resp.ExpiresAt)\n}\n</code></pre>"},{"location":"api/api-go/#requesting-a-mytoken","title":"Requesting a Mytoken","text":"<p>The following functions can be used to obtain a mytoken from <code>oidc-agent</code>.</p>"},{"location":"api/api-go/#mytoken-request","title":"Mytoken Request","text":"<p>All functions take a <code>MytokenRequest</code> struct. This struct describes the request:</p> <pre><code>// MytokenRequest is used to request a  mytoken from the agent\ntype MytokenRequest struct {\n    // ShortName that should be used\n    ShortName string\n    // A mytoken profile describing the properties of the requested mytoken\n    // https://mytoken-docs.data.kit.edu/concepts/profiles/\n    MytokenProfile string\n    // A string describing the requesting application (i.e. its name). It might\n    // be displayed to the user, if the request must be confirmed or an account\n    // configuration loaded.\n    ApplicationHint string\n}\n</code></pre>"},{"location":"api/api-go/#getmytoken","title":"GetMytoken","text":"<pre><code>func GetMytoken(req MytokenRequest) (token string, err error)\n</code></pre> <p>This function requests a mytoken from oidc-agent according to the passed <code>MytokenRequest</code>.</p>"},{"location":"api/api-go/#return-value_2","title":"Return Value","text":"<p>The function returns only the mytoken as a <code>string</code> and an error. To additionally obtain other information use <code>GetMytokenResponse</code>. On failure an error is returned.</p>"},{"location":"api/api-go/#example","title":"Example","text":"<p>A complete example can look the following:</p> <pre><code>token, err := liboidcagent.GetMytoken(liboidcagent.MytokenRequest{\n  ShortName: accountName,\n  MytokenProfile: profile,\n  ApplicationHint: \"Example-App\",\n})\nif err != nil {\n    var agentError *OIDCAgentError\n    if errors.As(err, &amp;agentError) {\n        fmt.Printf(\"%s\\n\", agentError.ErrorWithHelp())\n    }\n    // Additional error handling\n} else {\n    fmt.Printf(\"Mytoken is: %s\\n\", token)\n}\n</code></pre>"},{"location":"api/api-go/#getmytokenresponse","title":"GetMytokenResponse","text":"<pre><code>func GetMytokenResponse(req MytokenRequest) (resp MytokenResponse, err error)\n</code></pre> <p>This function requests a mytoken from oidc-agent according to the passed <code>MytokenRequest</code>.</p>"},{"location":"api/api-go/#return-value_3","title":"Return Value","text":"<p>The function returns a <code>MytokenResponse struct</code> that contains the requested token, as well as other information.</p> <p>The values can be accessed the following way:</p> <pre><code>response, err := liboidcagent.GetMytokenResponse(...)\nresponse.Mytoken        // mytoken (or transfer code)\nresponse.MytokenType    // mytoken type\nresponse.OIDCIssuer     // OP issuer url\nresponse.MytokenIssuer  // mytoken issuer url\nresponse.ExpiresAt      // expiration time\n</code></pre> <p>There are additional fields available from the mytoken API's <code>MytokenResponse</code> struct which is included in this libraries <code>MytokenResponse</code> struct.</p>"},{"location":"api/api-go/#example_1","title":"Example","text":"<p>A complete example can look the following:</p> <pre><code>resp, err := liboidcagent.GetMytokenResponse(liboidcagent.MytokenRequest{\n  ShortName: accountName,\n  MytokenProfile: profile,\n  ApplicationHint: \"Example-App\",\n})\nif err != nil {\n  var agentError *OIDCAgentError\n  if errors.As(err, &amp;agentError) {\n    fmt.Printf(\"%s\\n\", agentError.ErrorWithHelp())\n  }\n  // Additional error handling\n} else {\n  fmt.Printf(\"Mytoken is: %s\\n\", resp.Mytoken)\n  fmt.Printf(\"Mytoken issued by: %s\\n\", resp.MytokenIssuer)\n  fmt.Printf(\"Obtains ATs for: %s\\n\", resp.OIDCIssuer)\n  fmt.Printf(\"The token expires at: %s\\n\", resp.ExpiresAt)\n}\n</code></pre>"},{"location":"api/api-go/#getting-loaded-accounts","title":"Getting Loaded Accounts","text":"<pre><code>func GetLoadedAccounts() (accountNames []string, err error) {\n</code></pre> <p>This function requests the list of currently loaded accounts from oidc-agent.</p>"},{"location":"api/api-go/#return-value_4","title":"Return Value","text":"<p>The function returns a list of the currently loaded accounts as a <code>[]string</code> on success and an <code>OIDCAgentError</code> on failure.</p>"},{"location":"api/api-go/#getting-configured-accounts","title":"Getting Configured Accounts","text":"<pre><code>func GetConfiguredAccounts() (accounts []string) {\n</code></pre> <p>This function checks the oidc-agent directory for the configured accounts.</p>"},{"location":"api/api-go/#return-value_5","title":"Return Value","text":"<p>The function returns a list of the configured accounts as a <code>[]string</code>.</p>"},{"location":"api/api-ipc/","title":"IPC-API","text":""},{"location":"api/api-ipc/#ipc-api","title":"IPC-API","text":"<p>Alternatively an application can directly communicate with the oidc-agent through UNIX domain sockets. The socket address can be obtained from the environment variable which is set by the agent (<code>OIDC_SOCK</code>). The request has to be sent json encoded. We use a UNIX domain socket of type <code>SOCK_STREAM</code>.</p> <p>All Clients should ignore additional fields returned in a response from oidc-agent, if the client does not understand these fields. Vice versa oidc-agent ignores fields that it does not understand.</p> <p>The following fields and values have to be present for the different calls:</p>"},{"location":"api/api-ipc/#access-token","title":"Access Token:","text":""},{"location":"api/api-ipc/#request","title":"Request","text":"field value Requirement Level request access_token REQUIRED account &lt;account_shortname&gt; REQUIRED if 'issuer' not used issuer &lt;issuer_url&gt; REQUIRED if 'account' not used min_valid_period &lt;min_valid_period&gt; [s] RECOMMENDED application_hint &lt;application_name&gt; RECOMMENDED scope &lt;space delimited list of scopes&gt; OPTIONAL audience &lt;audience for the token&gt; OPTIONAL <p>Note that one of the fields <code>account</code> and  <code>issuer</code> has to be present. Use <code>account</code> to request an access token for a specific account configuration and <code>issuer</code> when you do not know which account configuration should be used but you do know the issuer for which you want to obtain an access token. Do not provide both of these options in the same request.</p>"},{"location":"api/api-ipc/#examples","title":"Examples","text":"<p>The application <code>example_application</code> requests an access token for the account configuration <code>iam</code>. The token should be valid for at least 60 seconds and have the scopes <code>openid profile phone</code> and the audiences <code>foo</code> and <code>bar</code>.</p> <pre><code>{\n  \"request\": \"access_token\",\n  \"account\": \"iam\",\n  \"min_valid_period\": 60,\n  \"application_hint\": \"example_application\",\n  \"scope\": \"openid profile phone\",\n  \"audience\": \"foo bar\"\n}\n</code></pre> <p>The application <code>example_application</code> requests an access token for the provider <code>https://example.com/</code>. There are no guarantees that the token will be valid longer than 0 seconds and it will have all scopes that are available for the used account configuration.</p> <pre><code>{\n  \"request\": \"access_token\",\n  \"issuer\": \"https://example.com/\",\n  \"application_hint\": \"example_application\"\n}\n</code></pre>"},{"location":"api/api-ipc/#response","title":"Response","text":"field value status success access_token &lt;access_token&gt; issuer &lt;issuer_url&gt; expires_at &lt;expiration time&gt; <p>Example:</p> <pre><code>{\n  \"status\": \"success\",\n  \"access_token\": \"token1234\",\n  \"issuer\": \"https:example.com/\",\n  \"expires_at\": 1541517118\n}\n</code></pre>"},{"location":"api/api-ipc/#error-response","title":"Error Response","text":"field value status failure error &lt;error_description&gt; info &lt;help_message&gt; <p>The help message in the <code>info</code> key is optionally and therefore might be omitted.</p> <p>Example:</p> <pre><code>{\n  \"status\": \"failure\",\n  \"error\": \"Account not loaded\"\n}\n</code></pre>"},{"location":"api/api-ipc/#mytoken","title":"Mytoken:","text":""},{"location":"api/api-ipc/#request_1","title":"Request","text":"field value Requirement Level request mytoken REQUIRED account &lt;account_shortname&gt; REQUIRED mytoken_profile &lt;mytoken profile&gt; RECOMMENDED application_hint &lt;application_name&gt; RECOMMENDED"},{"location":"api/api-ipc/#example","title":"Example","text":"<p>The application <code>example_application</code> requests a mytoken for the account configuration <code>iam</code>. The mytoken should have the <code>AT</code> capability, it can only be used to obtain <code>7</code> access tokens with only the <code>openid profile email</code> scope and expires after seven days.</p> <pre><code>{\n  \"request\": \"mytoken\",\n  \"account\": \"iam\",\n  \"mytoken_profile\": {\n    \"capabilities\": [\n      \"AT\"\n    ],\n    \"restrictions\": [\n      {\n        \"exp\": \"+7d\",\n        \"usages_AT\": 7,\n        \"scope\": \"openid profile email\"\n      }\n    ]\n  },\n  \"application_hint\": \"example_application\"\n}\n</code></pre>"},{"location":"api/api-ipc/#response_1","title":"Response","text":"field value status success mytoken &lt;mytoken or transfer_code&gt; mytoken_issuer &lt;issuer_url of the mytoken instance&gt; oidc_issuer &lt;issuer_url of the OP&gt; expires_at &lt;expiration time&gt; <p>Additionally, fields included in the mytoken's server response, such as <code>restrictions</code>, <code>mytoken_type</code> are also included.</p> <p>Example:</p> <pre><code>{\n  \"status\": \"success\",\n  \"mytoken\": \"token1234\",\n  \"mytoken_type\": \"token\",\n  \"oidc_issuer\": \"https:op.example.com/\",\n  \"mytoken_issuer\": \"https://mytoken.example.org\",\n  \"expires_at\": 1541517118,\n  \"capabilities\": [\n    \"AT\"\n  ]\n}\n</code></pre>"},{"location":"api/api-ipc/#error-response_1","title":"Error Response","text":"field value status failure error &lt;error_description&gt; info &lt;help_message&gt; <p>The help message in the <code>info</code> key is optionally and therefore might be omitted.</p> <p>Example:</p> <pre><code>{\n  \"status\": \"failure\",\n  \"error\": \"Account not loaded\"\n}\n</code></pre>"},{"location":"api/api-ipc/#list-of-accounts","title":"List of Accounts:","text":""},{"location":"api/api-ipc/#request_2","title":"Request","text":"field value Requirement Level request loaded_accounts REQUIRED"},{"location":"api/api-ipc/#examples_1","title":"Examples","text":"<pre><code>{\n  \"request\": \"loaded_accounts\"\n}\n</code></pre>"},{"location":"api/api-ipc/#response_2","title":"Response","text":"field value status success info &lt;list of loaded accounts&gt; <p>Example:</p> <pre><code>{\n  \"status\": \"success\",\n  \"info\": [\n    \"kit\",\n    \"google\",\n    \"iam\"\n  ]\n}\n</code></pre>"},{"location":"api/api-ipc/#error-response_2","title":"Error Response","text":"field value status failure error &lt;error_description&gt; <p>Example:</p> <pre><code>{\n  \"status\": \"failure\",\n  \"error\": \"Internal error\"\n}\n</code></pre>"},{"location":"api/api-py/","title":"liboidcagent-py","text":""},{"location":"api/api-py/#liboidcagent-py","title":"liboidcagent-py","text":"<p>A <code>python</code> library for <code>oidc-agent</code> is available at https://github.com/indigo-dc/liboidc-agent-py.</p> <p>To use it in your <code>python</code> application install it with</p> <pre><code>pip install liboidcagent\n</code></pre> <p>and import it with:</p> <pre><code>import liboidcagent as agent\n</code></pre>"},{"location":"api/api-py/#error-handling","title":"Error Handling","text":"<p>The library will raise an exception of type <code>OidcAgentError</code> if something goes wrong.</p> <p>Error Handling can be done the following way:</p> <pre><code>try:\n    print(agent.get_access_token(account_name))\nexcept agent.OidcAgentError as e:\n    print(\"ERROR oidc-agent: {}\".format(e))\n</code></pre>"},{"location":"api/api-py/#requesting-an-access-token-for-an-account-configuration","title":"Requesting an Access Token For an Account Configuration","text":"<p>The following functions can be used to obtain an access token for a specific account configuration from <code>oidc-agent</code>. If you / your application does not know which account configuration should be used, but you know for which provider you need an access token you can also request an access token for a provider.</p>"},{"location":"api/api-py/#get_access_token","title":"get_access_token","text":"<pre><code>def get_access_token(account_name, min_valid_period=0,\n                     application_hint=None, scope=None, audience=None)\n</code></pre> <p>This function requests an access token from oidc-agent for the <code>account_name</code> account configuration. The access token should have <code>scope</code> scopes, be valid for at least <code>minValidPeriod</code> seconds, and have the <code>audience</code> audience.</p>"},{"location":"api/api-py/#parameters","title":"Parameters","text":"<ul> <li><code>account_name</code> is the shortname of the account configuration that should be used.</li> <li>If <code>min_valid_period</code> is   <code>0</code> (default) no guarantee about the validity of the token can be made; it is possible that it expires before it can   be used. Can be omitted.</li> <li><code>application_hint</code> should be the name of the application that requests an access token. This string might be displayed   to the user for authorization purposes. Can be omitted.</li> <li>If <code>scope</code> is None, the default scopes for that account are used. So usually it is enough to use <code>None</code>   or to omit this parameter.</li> <li>If <code>audience</code> is None, no special audience is requested for this access token. This parameter is used to request an   access token with a specific audience.</li> </ul>"},{"location":"api/api-py/#return-value","title":"Return Value","text":"<p>The function returns only the access token. To additionally obtain other information use <code>get_token_response</code>.</p>"},{"location":"api/api-py/#example","title":"Example","text":"<p>A complete example can look the following:</p> <pre><code>token = agent.get_access_token(account_name, 60, \"example-app\")\nprint(\"Access token is: {}\".format(token))\n</code></pre>"},{"location":"api/api-py/#get_token_response","title":"get_token_response","text":"<pre><code>def get_token_response(account_name, min_valid_period=0,\n                       application_hint=None, scope=None, audience=None)\n</code></pre> <p>This function requests an access token from oidc-agent for the <code>account_name</code> account configuration. The access token should have <code>scope</code> scopes, be valid for at least <code>min_valid_period</code> seconds, and have the <code>audience</code> audience.</p>"},{"location":"api/api-py/#parameters_1","title":"Parameters","text":"<ul> <li><code>account_name</code> is the shortname of the account configuration that should be used.</li> <li>If <code>min_valid_period</code> is   <code>0</code> (default) no guarantee about the validity of the token can be made; it is possible that it expires before it can   be used. Can be omitted.</li> <li><code>application_hint</code> should be the name of the application that requests an access token. This string might be displayed   to the user for authorization purposes. Can be omitted.</li> <li>If <code>scope</code> is None, the default scopes for that account are used. So usually it is enough to use <code>None</code>   or to omit this parameter.</li> <li>If <code>audience</code> is None, no special audience is requested for this access token. This parameter is used to request an   access token with a specific audience.</li> </ul>"},{"location":"api/api-py/#return-value_1","title":"Return Value","text":"<p>The function returns three values: the requested access token, the url of the issuer that issued the token and the time when the token expires.</p> <p>The values can be accessed the following way:</p> <pre><code>token, iss, exp = agent.get_token_response(account_name, 60, \"example-app\")\ntoken  # access token\niss  # issuer url\nexp  # expiration time\n\ntoken_response = agent.get_token_response(account_name, 60, \"example-app\")\ntoken_response[0]  # access token\ntoken_response[1]  # issuer url\ntoken_response[2]  # expiration time\n</code></pre>"},{"location":"api/api-py/#example_1","title":"Example","text":"<p>A complete example can look the following:</p> <pre><code>token, iss, exp = agent.get_token_response(account_name, 60, \"example-app\")\nprint(\"Access token is: {}\".format(token))\nprint(\"Access token issued by: {}\".format(iss))\nprint(\"Access token expires at: {}\".format(exp))\n</code></pre>"},{"location":"api/api-py/#requesting-an-access-token-for-a-provider","title":"Requesting an Access Token For a Provider","text":"<p>The following functions can be used to obtain an access token for a specific OpenID Provider (issuer). This might be useful for applications that only work with a specific provider and therefore know the issuer for which they need an access token, but do not require the user to provide an account configuration shortname.</p>"},{"location":"api/api-py/#get_access_token_by_issuer_url","title":"get_access_token_by_issuer_url","text":"<pre><code>def get_access_token_by_issuer_url(issuer_url, min_valid_period=0,\n                                   application_hint=None, scope=None,\n                                   audience=None)\n</code></pre> <p>This function requests an access token from <code>oidc-agent</code> for the provider with <code>issuer_url</code>. The access token should have <code>scope</code> scopes, be valid for at least <code>min_valid_period</code> seconds, and have the <code>audience</code> audience.</p>"},{"location":"api/api-py/#parameters_2","title":"Parameters","text":"<ul> <li><code>issuer_url</code> is the issuer url of the provider for which an access token should be obtained.</li> <li>If <code>min_valid_period</code> is   <code>0</code> (default) no guarantee about the validity of the token can be made; it is possible that it expires before it can   be used. Can be omitted.</li> <li><code>application_hint</code> should be the name of the application that requests an access token. This string might be displayed   to the user for authorization purposes. Can be omitted.</li> <li>If <code>scope</code> is None, the default scopes for that account are used. So usually it is enough to use <code>None</code>   or to omit this parameter.</li> <li>If <code>audience</code> is None, no special audience is requested for this access token. This parameter is used to request an   access token with a specific audience.</li> </ul>"},{"location":"api/api-py/#return-value_2","title":"Return Value","text":"<p>The function returns only the access token. To additionally obtain other information use <code>get_token_response_by_issuer_url</code>.</p>"},{"location":"api/api-py/#example_2","title":"Example","text":"<p>A complete example can look the following:</p> <pre><code>token = agent.get_access_token_by_issuer_url(\"https://example.com\", 60, \"example-app\")\nprint(\"Access token is: {}\".format(token))\n</code></pre>"},{"location":"api/api-py/#get_token_response_by_issuer_url","title":"get_token_response_by_issuer_url","text":"<pre><code>def get_token_response_by_issuer_url(issuer_url, min_valid_period=0,\n                                     application_hint=None, scope=None,\n                                     audience=None)\n</code></pre> <p>This function requests an access token from oidc-agent for the provider with <code>issuer_url</code>. The access token should have <code>scope</code> scopes, be valid for at least <code>min_valid_period</code> seconds, and have the <code>audience</code> audience.</p>"},{"location":"api/api-py/#parameters_3","title":"Parameters","text":"<ul> <li><code>issuer_url</code> is the issuer url of the provider for which an access token should be obtained.</li> <li>If <code>min_valid_period</code> is   <code>0</code> (default) no guarantee about the validity of the token can be made; it is possible that it expires before it can   be used. Can be omitted.</li> <li><code>application_hint</code> should be the name of the application that requests an access token. This string might be displayed   to the user for authorization purposes. Can be omitted.</li> <li>If <code>scope</code> is None, the default scopes for that account are used. So usually it is enough to use <code>None</code>   or to omit this parameter.</li> <li>If <code>audience</code> is None, no special audience is requested for this access token. This parameter is used to request an   access token with a specific audience.</li> </ul>"},{"location":"api/api-py/#return-value_3","title":"Return Value","text":"<p>The function returns three values: the requested access token, the url of the provider that issued the token and the time when the token expires.</p> <p>The values can be accessed the following way:</p> <pre><code>token, iss, exp = agent.get_token_response_by_issuer_url(issuer_url, 60, \"example-app\")\ntoken  # access token\niss  # issuer url\nexp  # expiration time\n\ntoken_response = agent.get_token_response_by_issuer_url(issuer_url, 60, \"example-app\")\ntoken_response[0]  # access token\ntoken_response[1]  # issuer url\ntoken_response[2]  # expiration time\n</code></pre>"},{"location":"api/api-py/#example_3","title":"Example","text":"<p>A complete example can look the following:</p> <pre><code>token, iss, exp = agent.get_token_response_by_issuer_url(\"https://example.com\", 60, \"example-app\")\nprint(\"Access token is: {}\".format(token))\nprint(\"Access token issued by: {}\".format(iss))\nprint(\"Access token expires at: {}\".format(exp))\n</code></pre>"},{"location":"api/api-py/#requesting-a-mytoken","title":"Requesting a Mytoken","text":"<p>The following functions can be used to obtain a mytoken from <code>oidc-agent</code>.</p>"},{"location":"api/api-py/#get_mytoken","title":"get_mytoken","text":"<pre><code>def get_mytoken(account_name, mytoken_profile=None, application_hint=None)\n</code></pre> <p>This function requests a mytoken from oidc-agent for the <code>account_name</code> account configuration. The mytoken has properties according to the <code>mytoken_profile</code>.</p>"},{"location":"api/api-py/#parameters_4","title":"Parameters","text":"<ul> <li><code>account_name</code> is the shortname of the account configuration that should be used.</li> <li><code>mytoken_profile</code> describes the properties of the requested mytoken.</li> <li><code>application_hint</code> should be the name of the application that requests an access token. This string might be displayed   to the user for authorization purposes. Can be omitted.</li> </ul>"},{"location":"api/api-py/#return-value_4","title":"Return Value","text":"<p>The function returns only the mytoken. To additionally obtain other information use <code>get_mytoken_response</code>.</p>"},{"location":"api/api-py/#example_4","title":"Example","text":"<p>A complete example can look the following:</p> <pre><code>token = agent.get_mytoken(account_name, '{\"capabilities\":[\"AT\",\"tokeninfo\",\"create_mytoken\"]}', \"example-app\")\nprint(\"Mytoken is: {}\".format(token))\n</code></pre>"},{"location":"api/api-py/#get_mytoken_response","title":"get_mytoken_response","text":"<pre><code>def get_mytoken_response(account_name, mytoken_profile=None, application_hint=None)\n</code></pre> <p>This function requests a mytoken from oidc-agent for the <code>account_name</code> account configuration. The mytoken has properties according to the <code>mytoken_profile</code>.</p>"},{"location":"api/api-py/#parameters_5","title":"Parameters","text":"<ul> <li><code>account_name</code> is the shortname of the account configuration that should be used.</li> <li><code>mytoken_profile</code> describes the properties of the requested mytoken.</li> <li><code>application_hint</code> should be the name of the application that requests an access token. This string might be displayed   to the user for authorization purposes. Can be omitted.</li> </ul>"},{"location":"api/api-py/#return-value_5","title":"Return Value","text":"<p>The function returns a dictionary with various values, among them the requested mytoken, the issuer url of the mytoken server that issued the mytoken, the issuer url of the OpenID Provider for which access tokens can be obtained, and the time when the mytoken expires.</p> <p>The values can be accessed the following way:</p> <pre><code>token_response = agent.get_mytoken_response(account_name, profile, \"example-app\")\ntoken_response['mytoken']  # The mytoken( or transfer code)\ntoken_response['mytoken_type']  # The mytoken type (as returned from mytoken)\ntoken_response['mytoken_issuer']  # The mytoken server that issued the mytoken\ntoken_response['oidc_issuer']  # The OP issuer url for which ATs can be obtained\ntoken_response['expires_at']  # The time when the mytoken expires\n</code></pre> <p>Additional values are included as they are returned from the mytoken server, see mytoken's documentation for more information.</p>"},{"location":"api/api-py/#example_5","title":"Example","text":"<p>A complete example can look the following:</p> <pre><code>res = agent.get_mytoken_response(account_name, profile, \"example-app\")\nprint(\"Mytoken is: {}\".format(res['mytoken']))\nprint(\"Mytoken issued by: {}\".format(res['mytoken_issuer']))\nprint(\"ATs useable at: {}\".format(res['oidc_issuer']))\nprint(\"Mytoken expires at: {}\".format(res['expires_at']))\n</code></pre>"},{"location":"configuration/config/","title":"General Configuration","text":"<p>Starting with oidc-agent <code>5.0.0</code> oidc-agent now has a central configuration file. Before, (apart from some exceptions) it was only possible to use command line options to tweak behavior. With the new configuration file a lot of the options can be set globally.</p> <p>The <code>config</code> file can be located in <code>/etc/oidc-agent</code> or the oidc-agent directory. If both files are present the configurations are merged, where options from the user's oidc-agent directory overwrite options specified in the global config file. The file is structured into sections for the different tools and configuration options should be self-explaining or explained in the commented default configuration file.</p>"},{"location":"configuration/custom-parameters/","title":"Custom Request Parameter","text":"<p>Since version <code>5.2.0</code> it is possible to customize the requests send by the agent to the OPs and add custom request parameters.</p> <p>Custom parameters can be configured in a config file named <code>custom_parameters.config</code>. As usual the file can be placed in <code>/etc/oidc-agent</code> or the agent directory. If both are present parameters are merged together.</p> <p>The <code>custom_parameters.config</code> contains a json array of parameter specifications. A parameter specification is a json object that can have the following fields:</p> Field Name Description <code>parameter</code> The name of the parameter to be added to the request <code>value</code> The value that should be used. The value can be given in different ways. If the value starts with a <code>$</code> the following characters are interpreted as an environment variable and the value is read from this variable. If the given value starts with an <code>/</code> it is interpreted as a file path and the first line from that file is used as the value. Otherwise the value is used directly. <code>for_issuer</code> A JSON array of issuer urls for which this parameter should be used <code>for_account</code> A JSON array of account shortnames for which this parameter should be used <code>request</code> A JSON array of requests for which this parameter should be used. Possible values are <code>refresh</code>, <code>auth_url</code>, <code>code-exchange</code>,<code>device-init</code>,<code>device-polling</code>,<code>registration</code>,<code>revocation</code>,<code>password</code>"},{"location":"configuration/default-accounts/","title":"Default Accounts","text":""},{"location":"configuration/default-accounts/#default-account-configuration-for-a-provider","title":"Default Account Configuration for a Provider","text":"<p>The <code>issuer.config</code> file in the oidc-agent directory can also be used to set a default account configuration file for each provider by using the <code>default_account</code> claim. for more details please refer to the documentations about issuer.config.</p>"},{"location":"configuration/directory/","title":"oidc-agent Directory","text":""},{"location":"configuration/directory/#oidc-agent-directory","title":"oidc-agent Directory","text":"<p>An oidc-agent directory will be created when using oidc-gen for the first time. Depending on the existence of <code>~/.config</code> it will be located at one of these locations:</p> <ul> <li><code>~/.config/oidc-agent</code></li> <li><code>~/.oidc-agent</code></li> </ul> <p>Alternatively, the location can also be set through an environment variable called <code>OIDC_CONFIG_DIR</code>. However, we note that this environment variable has to be present whenever you use one of the <code>oidc-</code> binaries. It is therefore recommend to set it in the <code>.bash_profile</code> or similar.</p> <p>All account configuration files generated by <code>oidc-gen</code> are saved in this oidc-agent directory. Additionally, there are some config files located in this directory.</p>"},{"location":"configuration/forwarding/","title":"Agent Forwarding","text":""},{"location":"configuration/forwarding/#agent-forwarding","title":"Agent Forwarding","text":"<p>When using <code>ssh</code> to connect to a remote server, you may also need to receive access tokens from the local agent. This is possible by forwarding the UNIX domain socket used for communicating with the agent.</p> <p>This needs a client and server side configuration. Both configurations can be done by a local user.</p>"},{"location":"configuration/forwarding/#client","title":"Client","text":"<p>This can be done using the <code>-R</code> option of <code>ssh</code> (e.g. with <code>ssh -R /tmp/oidc-forward:$OIDC_SOCK  user@host</code>). Defining an alias makes this more easily usable: . Example: <pre><code>alias ssh-oidc='ssh -R /tmp/oidc-forward-$RANDOM:$OIDC_SOCK'\nssh-oidc user@host\n</code></pre> For most convenience, you should put the alias line into your <code>.profile</code>, <code>.zshrc</code>, or <code>.bash_aliases</code> file.</p> <p>Note that you could also overwrite the actual <code>ssh</code> command with an alias. While this works, this will always create a socket file on the remote host, which can be used by the remote system administrator to access your tokens. Use it wisely.</p>"},{"location":"configuration/forwarding/#server","title":"Server","text":"<p>On the server, you have to set the <code>OIDC_SOCK</code> environment variable (<code>export OIDC_SOCK=/tmp/oidc-forward</code>).</p> <p>We recommend the following configurations: Put the following in your <code>.profile</code>, <code>.zshrc</code>, or <code>.bash_profile</code> on the server: <pre><code>test -z $OIDC_SOCK &amp;&amp; {\n    export OIDC_SOCK=`/bin/ls -rt /tmp/oidc-forward-* 2&gt;/dev/null | tail -n 1`\n}\nalias ssh-oidc='ssh -R /tmp/oidc-forward-$RANDOM:$OIDC_SOCK'\n</code></pre></p> <p>Add this into your <code>.zlogout</code>, or <code>.bash_logout</code> on the server: <pre><code>if [ -e $OIDC_SOCK ]; then\n    rm -f $OIDC_SOCK\nfi\n</code></pre></p>"},{"location":"configuration/integration/","title":"oidc-agent Integration","text":""},{"location":"configuration/integration/#oidc-agent-integration","title":"oidc-agent Integration","text":""},{"location":"configuration/integration/#xsession-integration","title":"Xsession Integration","text":"<p>oidc-agent has support for integration with Xsession, which is enabled by default if the <code>oidc-agent-desktop</code> package is installed. This means oidc-agent will automatically start at the beginning of an  Xsession and then be available throughout that session (i.e. you can connect to the agent from every terminal).</p> <p>To disable / re-enable this behavior (system-wide) edit the <code>/etc/oidc-agent/oidc-agent-service.options</code> file. To disable it on a per user basis, copy this file to your oidc-agent directory and edit it there. To disable XSession integration uncomment / add the line: <pre><code>START_AGENT_WITH_XSESSION=\"False\"\n</code></pre> To re-enable Xsession integration change it to <code>START_AGENT_WITH_XSESSION=\"True\"</code> or comment it out.</p> <p>To pass command line options to the automatically started agent edit the <code>OIDC_AGENT_OPTS</code> variable.</p> <p>Note that from version 4.1.0 on the agent can be restarted without losing the integration in existing terminals. To do so run: <pre><code>oidc-agent-service restart-s\n</code></pre></p> <p>We also want to note that <code>oidc-agent-service</code> can be used without Xsession integration.</p>"},{"location":"configuration/issuers/","title":"Configuration of Providers","text":"<p>Prior to oidc-agent version <code>5.0.0</code> the <code>issuer.config</code> file was used to have a list of issuers (OpenID Providers) that <code>oidc-gen</code> used as suggestions. It could also be used to set a default account for each issuer. A separate file <code>pubclients.config</code> was used to configure public clients.</p> <p>In oidc-agent 5 and beyond these files have been merged into a single, more powerful configuration file about issuers. The <code>issuer.config</code> file can contain a json array of json objects each describing an issuer. It is also possible to split configuration of issuers into separate files. The <code>issuer.config.d</code> directory can contain config files that each hold the json object configuration for one issuer.</p> <p>oidc-agent combines the issuer configuration from these locations (the lowest entry has the highest priority):</p> <ul> <li><code>/etc/oidc-agent/issuer.config.d/*</code></li> <li><code>/etc/oidc-agent/issuer.config</code></li> <li><code>$OIDC_CONFIG_DIR/issuer.config.d/*</code></li> <li><code>$OIDC_CONFIG_DIR/issuer.config</code></li> </ul> <p>An issuer config object can have the following fields:</p> Field Name Description <code>issuer</code> The issuer url <code>manual_register</code> A url where a client can be registered manually <code>contact</code> Contact information for this issuer <code>configuration_endpoint</code> The url of the configuration endpoint if it cannot be derived from the issuer url <code>device_authorization_endpoint</code> The url of the device authorization endpoint if it is not published at the configuration endpoint <code>cert_path</code> The local certificate bundle path that should be used when communicating with the issuer <code>pw-store</code> Indicates if the encryption password should be kept in memory, so that the account configuration file can be updated without prompting the user for the password again <code>oauth</code> Indicates that this is an oauth2 instead of an OIDC issuer <code>legacy_aud_mode</code> Indicates that this OIDC issuer does not support RFC 8707 for requesting ATs with a specific audience and the mechanism from oidc-agent&lt;5 should be used (space-delimited list in the 'audience' parameter). <code>pubclient</code> Information about a public client for this issuer <p>Additionally, the following properties are supported, but should only be given in the <code>issuer.config</code> file located in the oidc-agent directory.</p> <ul> <li><code>default_account</code>: The name of the default account config; if not given the first account config in the <code>accounts</code>   field is used as a default.</li> <li><code>accounts</code>: A list of all the available accounts for this issuer; MUST not be edited manually, this field is managed   by   the agent.</li> </ul> <p>The <code>pubclient</code> field is an object that can have the following fields:</p> Field Name Description <code>client_id</code> The client id of the public client <code>client_secret</code> If given the client secret of the public client <code>scope</code> The scopes available for this public client <code>flows</code> The oidc flows supported by this public client; possible values are the same as for the <code>--flow</code> option of <code>oidc-gen</code>"},{"location":"installation/install/","title":"Installation","text":"<p>This document describes how to install oidc-agent on linux. To install oidc-agent on Windows or MacOS refer to the  Windows documentation and MacOS documentation, respectively.</p>"},{"location":"installation/install/#from-package","title":"From Package","text":"<p>Please check if your distribution already includes oidc-agent. In this case installing is as simple as</p> <pre><code>sudo apt-get install oidc-agent\n</code></pre> <p>** However, please also check that the oidc-agent version included in your distribution is up-2-date (You need at least oidc-agent version &gt; 5.0.0). (Currently, unfortunately, this is not the case for debian / ubuntu) **</p> <p>If your distribution does not include an up-2-date version of oidc-agent, packaged versions of oidc-agent are available for many different distros at http://repo.data.kit.edu.</p>"},{"location":"installation/install/#from-source","title":"From Source","text":"<p>If you want to build oidc-agent from source you can do so.</p>"},{"location":"installation/install/#dependencies","title":"Dependencies","text":""},{"location":"installation/install/#basic-dependencies","title":"Basic Dependencies","text":"<p>To be able to build oidc-agent, you need at least the following dependencies installed on your system:</p> <ul> <li>gcc</li> <li>make</li> <li>libcurl (libcurl4-openssl-dev)</li> <li>libsodium (&gt;= 1.0.14) (libsodium-dev)</li> <li>libmicrohttpd (libmicrohttpd-dev)</li> <li>libqrencode (libqrencode-dev)</li> <li>libcjson-dev</li> <li>libwebkit<ul> <li>Debian / Ubuntu: webkit2-gtk (libwebkit2gtk-4.0-dev)</li> <li>Centos / Fedora: webkitgtk4 (webkitgtk4-devel)</li> <li>SuSE: webkit2gtk3 (webkit2gtk3-soup2-devel)</li> </ul> </li> </ul>"},{"location":"installation/install/#debianubuntu","title":"Debian/Ubuntu","text":"<pre><code>sudo apt-get install \\\n      libcurl4-openssl-dev \\\n      libsodium-dev \\\n      libmicrohttpd-dev \\\n      libsecret-1-dev \\\n      libqrencode-dev \\\n      libwebkit2gtk-4.0-dev\n</code></pre>"},{"location":"installation/install/#centos-fedora","title":"Centos / Fedora","text":"<pre><code>sudo yum install \\\n    libcurl-devel \\\n    libsodium-devel \\\n    libmicrohttpd-devel \\\n    libsecret-devel \\\n    qrencode-devel \\\n    webkitgtk4-devel\n</code></pre>"},{"location":"installation/install/#opensuse","title":"OpenSuSE","text":"<pre><code>sudo zypper install \\\n    libcurl-devel \\\n    libsodium-devel \\\n    libmicrohttpd-devel \\\n    libsecret-devel \\\n    qrencode-devel \\\n    webkit2gtk3-soup2-devel\n</code></pre>"},{"location":"installation/install/#additional-build-dependencies","title":"Additional Build Dependencies","text":"<p>oidc-agent can be installed easiest from package. So even when building from source it is recommended to build the package and install it.</p> <p>Building the deb/rpm package might have additional dependencies. More information about those are found in the <code>rpm</code> or the <code>debian</code> subfolders. Note: The <code>debian</code> subfolder may only be available on the Debian Salsa git.</p> <p>Dockerised builds are supported via make targets, such as:</p> <ul> <li><code>dockerised_rpm_centos_7</code></li> <li><code>dockerised_rpm_centos_8</code></li> <li><code>dockerised_rpm_rockylinux_8.5</code></li> <li><code>dockerised_rpm_opensuse_15.3</code></li> <li><code>dockerised_rpm_opensuse_15.4</code></li> <li><code>dockerised_rpm_opensuse_tumbleweed</code></li> <li><code>dockerised_rpm_fedora_36</code></li> <li><code>dockerised_all_deb_packages: dockerised_deb_debian_bullseye</code></li> </ul> <p>The debian package targets are defined on the branches in the Debian Salsa git:</p> <ul> <li><code>dockerised_deb_debian_buster</code></li> <li><code>dockerised_deb_debian_bookworm</code></li> <li><code>dockerised_deb_ubuntu_focal</code></li> <li><code>dockerised_deb_ubuntu_jammy</code></li> <li><code>dockerised_deb_ubuntu_impish</code></li> <li><code>dockerised_deb_ubuntu_hirsute</code></li> <li><code>dockerised_deb_ubuntu_kinetic</code></li> </ul>"},{"location":"installation/install/#download-oidc-agent","title":"Download oidc-agent","text":"<p>After installing the necessary dependencies, one has to obtain a copy of the source. Possible ways are:</p> <ul> <li>clone the git repository</li> <li>download a release version</li> <li>download the source from GitHub</li> </ul>"},{"location":"installation/install/#using-git","title":"Using git","text":"<pre><code>git clone https://github.com/indigo-dc/oidc-agent\ncd oidc-agent\n</code></pre>"},{"location":"installation/install/#using-curl","title":"Using curl","text":"<pre><code>curl -L  https://github.com/indigo-dc/oidc-agent/archive/master.tar.gz -o /tmp/oidc-agent-master.tar.gz\ntar xzf /tmp/oidc-agent-master.tar.gz\ncd oidc-agent\n</code></pre>"},{"location":"installation/install/#build-and-install-oidc-agent","title":"Build and install oidc-agent","text":""},{"location":"installation/install/#building-binaries","title":"Building Binaries","text":"<p>The binaries can be build with <code>make</code>. To build and install run:</p> <pre><code>make\nsudo make install_lib\nsudo make install\nsudo make post_install\n</code></pre> <p>This will:</p> <ul> <li>build the binaries</li> <li>create man pages</li> <li>install the binaries</li> <li>install the man pages</li> <li>install configuration files</li> <li>install bash completion</li> <li>install a custom scheme handler</li> <li>enable the linker to use the newly installed libraries</li> <li>update the desktop database to enable the custom scheme handler</li> </ul> <p>If you want to install any of these files to another location you can pass a different path to make. E.g. <code>sudo make install BIN_PATH=/home/user</code> will install the binaries in <code>/home/user/bin</code> instead of <code>/usr/bin</code>.</p> <p>One could also run only <code>make</code> and manually copy the necessary files to another location and / or add the binaries' location to <code>PATH</code>. However, this is not recommend, because some files have to be placed at specific locations or additional configuration is needed. But it is also possible to install only a subset of all files, by calling the different <code>make install_</code> rules. Available targets are:</p> <pre><code>sudo make install_bin\nsudo make install_man\nsudo make install_conf\nsudo make install_bash\nsudo make install_scheme_handler\nsudo make install_xsession_script\nsudo make install_lib\nsudo make install_lib-dev\n</code></pre>"},{"location":"installation/macos/","title":"MacOS","text":""},{"location":"installation/macos/#installation","title":"Installation","text":""},{"location":"installation/macos/#install-with-homebrew","title":"Install with Homebrew","text":"<p>oidc-agent can be installed easiest using homebrew.</p> <pre><code>brew tap indigo-dc/oidc-agent\nbrew install oidc-agent\n</code></pre>"},{"location":"installation/macos/#building-oidc-agent-manually","title":"Building oidc-agent manually","text":""},{"location":"installation/macos/#download-source-code","title":"Download source code","text":"<ul> <li>git clone: <code>git clone https://github.com/indigo-dc/oidc-agent</code></li> </ul>"},{"location":"installation/macos/#install-dependencies","title":"Install dependencies:","text":"<ul> <li>Install brew to install dependencies</li> <li>pkgconfig <code>brew install pkgconfig</code></li> <li>argp <code>brew install argp-standalone</code></li> <li>libsodium <code>brew install libsodium</code></li> <li>libmicrohttpd <code>brew install libmicrohttpd</code></li> <li>qrencode <code>brew install qrencode</code></li> </ul> <ul> <li>help2man <code>brew install help2man</code></li> </ul>"},{"location":"installation/macos/#build-oidc-agent","title":"Build oidc-agent","text":"<p>Run make</p> <pre><code>make\n</code></pre>"},{"location":"installation/macos/#install-using-make","title":"Install using make","text":"<pre><code>make install\nmake post_install\n</code></pre> <p>This installs all necessary components to correct locations.</p>"},{"location":"installation/windows/","title":"Windows","text":""},{"location":"installation/windows/#installation","title":"Installation","text":""},{"location":"installation/windows/#using-wsl","title":"Using WSL","text":"<p>On a modern Windows system with WSL2 (verified, WSL1 might work) <code>oidc-agent</code> can be used through WSL:</p> <ul> <li>If not already done install WSL according to https://learn.microsoft.com/en-us/windows/wsl/install</li> <li>Add the <code>oidc-agent</code> repo and install according to http://repo.data.kit.edu for your chosen distribution</li> <li>Add <code>eval $(oidc-agent-service use)</code> to your <code>.bashrc</code></li> <li>Now <code>oidc-agent</code> and friends can be used from the WSL and windows shell as   used to, e.g.</li> </ul> <pre><code># From WSL \noidc-token &lt;shortname&gt;\n\n# From Powershell\nwsl oidc-token &lt;shortname&gt;\n</code></pre>"},{"location":"installation/windows/#native-installer","title":"\"Native\" Installer","text":"<p>We provide an installer for oidc-agent at: http://repo.data.kit.edu/windows/oidc-agent/.</p> <p>The installer will install all necessary binaries and libraries and oidc-agent is ready to use.</p> <p>We recommend to use the WSL method instead and only use this is installer if WSL is not possible. It is likely that support for this installer is dropped in the future.</p>"},{"location":"macos/","title":"oidc-agent on MacOS","text":"<p>oidc-agent can be used on MacOS. Some functionality might not be supported (yet) (see What does not work). However, all main features can be used on MacOS in the same way as on linux.</p>"},{"location":"macos/installation/","title":"Installation","text":""},{"location":"macos/installation/#installation","title":"Installation","text":"<p>Please see Installation.</p>"},{"location":"macos/state/","title":"State of Feature Support","text":""},{"location":"macos/state/#state-of-feature-support","title":"State of Feature Support","text":""},{"location":"macos/state/#what-does-work","title":"What does work:","text":"<ul> <li>Installing oidc-agent using homebrew</li> <li>Building oidc-agent manually</li> <li>Every basic functionality including password / consent prompts</li> </ul>"},{"location":"macos/state/#what-does-not-work","title":"What does not work:","text":"<ul> <li>syslog -&gt; we implemented a custom logging behavior. The log file can be found in the oidc-agent directory.<ul> <li>Obviously, now oidc-agent has to write to disk, which sort of breaks privilege separation.</li> </ul> </li> <li>bash completion</li> <li>Xsession integration</li> <li>some enhancements might not work properly (e.g. http-server might not be killed in all cases when the agent dies)</li> </ul>"},{"location":"oidc-agent-server/oidc-agent-server/","title":"oidc-agent-server","text":"<p><code>oidc-agent-server</code> was a special version of oidc-agent that could run as a central oidc-agent on a server. It was only a temporary component and support for <code>oidc-agent-server</code> was removed with version 4.1.0.</p> <p>A better alternative is the <code>mytoken</code> service. For more details about mytoken please refer to the mytoken documentation.</p>"},{"location":"provider/","title":"Integrate With Different Providers","text":"<p>In this section we describe how to generate a working account configuration for some of the supported OpenID Providers.</p> <p>If you have to register a client manually check the Client Configuration Values section.</p>"},{"location":"provider/b2access/","title":"B2Access","text":""},{"location":"provider/b2access/#b2access","title":"B2ACCESS","text":"<p>B2ACCESS does not support dynamic client registration and you have to register a client manually at https://b2access.eudat.eu/ https://b2access-integration.fz-juelich.de/ or https://unity.eudat-aai.fz-juelich.de/ (depending on the issuer url). </p> <p>There is documentation on how to do this at https://eudat.eu/services/userdoc/b2access-service-integration#UserDocumentation-B2ACCESSServiceIntegration-HowtoregisteranOAuthclient</p> <p>After the client registration call oidc-gen with the <code>-m</code> flag and enter the required information. </p> <p>Note: In general for B2ACCESS and UNITY OPs the following information may be helpful (depending on the instance you use)</p> <ul> <li><code>User Name</code> is the OIDC <code>client_id</code> (you can choose it)</li> <li><code>Password</code> is the OIDC <code>client_secret</code> (you choose it)</li> <li><code>Email Address</code> is an email address for contacting the admin of the service</li> <li><code>Service Security Contact</code> is the security responsible of the service. This   may be additional people, for example in a hosted VM setup</li> <li><code>Site Security Contact</code>is your computer centre security contact. Typically   your CERT.</li> <li>Service PP URL: This is your Privacy Policy (PP). Required by law.   Find a PP template here</li> <li>The <code>well_known</code> configuration of <code>login</code> is here: <pre><code>&lt;b2access-hostname&gt;/oauth2/.well-known/openid-configuration\n</code></pre></li> </ul>"},{"location":"provider/client-configuration-values/","title":"Client Configuration Values","text":"<p>When registering a client manually you might have to provide quite a number of specific configuration values. And even when using dynamic client registration <code>oidc-gen</code> prompts you for some values. If you are not familiar with one of these values, please check this section.</p> <p>When registering a client an OpenID Provider might be using default values for some of these configurations so you might not have to provide all of them.</p>"},{"location":"provider/client-configuration-values/#scope","title":"Scope","text":"<p>OpenID Connect clients use scope values to specify what access privileges are being requested for access tokens. Required scopes for oidc-agent are: <code>openid</code> and <code>offline_access</code>. Additional scopes can be registered if needed. Most likely you also want to register at least the <code>profile</code> scope.</p> <p>When using dynamic client registration the user will be prompted to enter scopes that will be registered with that client. The keyword <code>max</code> can be used to request all supported scopes.</p> <p>Example Scope: <code>openid profile offline_access</code></p>"},{"location":"provider/client-configuration-values/#redirect-uri","title":"Redirect Uri","text":"<p>The Redirect Uri is used during the Authorization Code Flow. The Redirect Uri must be of the following scheme: <code>http://localhost:&lt;port&gt;</code> where <code>&lt;port&gt;</code> should be an available port. It is also possible to specify an additional path, e.g. <code>http://localhost:8080/redirect</code>, but this is not required. It is important that this port is not used when generating the account configuration with oidc-gen. Multiple Redirect Uris can be registered to have a backup port if the first one may be already in use.  <code>oidc-gen</code> also supports a custom redirect scheme, that can be used to redirect directly to oidc-gen. In that case the redirect uri has to be of the form <code>edu.kit.data.oidc-agent:/&lt;path&gt;</code>.</p> <p>We recommend registering the following redirect uris:  - <code>http://localhost:4242</code>  - <code>http://localhost:8080</code>  - <code>http://localhost:43985</code>  - <code>edu.kit.data.oidc-agent:/redirect</code></p> <p>Note: Only pass the <code>edu.kit.data.oidc-agent:/redirect</code> uri to oidc-gen, if you wish to directly redirect to oidc-gen without using a webserver started by oidc-agent.</p>"},{"location":"provider/client-configuration-values/#response-type","title":"Response Type","text":"<p>The following response types must be registered: - 'token' when using the Password Flow (see also   flow)  - 'code' when using the Authorization Code Flow (see also flow)</p>"},{"location":"provider/client-configuration-values/#grant-type","title":"Grant Type","text":"<p>The following grant types must be registered: - 'refresh_token' if available - 'authorization_code' when using the Authorization Code Flow  (see also flow) - 'password' when using the Password Flow (see also   flow) - 'urn:ietf:params:oauth:grant-type:device_code' when using the Device Flow (see also flow)</p>"},{"location":"provider/eduteams/","title":"Eduteams","text":""},{"location":"provider/egi/","title":"EGI","text":""},{"location":"provider/egi/#egi-check-in","title":"EGI Check-in","text":"<p>EGI Check-in supports dynamic registration, but dynamically registered clients will not have any scopes. Therefore, users have to either register a client manually or use a preregistered public client (recommended).</p> <p>Example:</p> <p><pre><code># oidc-gen --pub --issuer https://aai.egi.eu/auth/realms/egi \\\n            --scope \"email \\\n             eduperson_entitlement \\\n             eduperson_scoped_affiliation \\\n             eduperson_unique_id\" &lt;shortname&gt;\n</code></pre> You will need to follow the OIDC-flow, which usually involves authentication in a web-browser. If the browser does not start, you can copy paste the displayed URL. </p> <pre><code>[...]\nGenerating account configuration ...\naccepted\nTo continue and approve the registered client visit the following URL in a Browser of your choice:\nhttps://[...]\n[...]\nPolling oidc-agent to get the generated account configuration .....success\nThe generated account config was successfully added to oidc-agent. You don't have to run oidc-add.\n</code></pre> <p>Finally, you will be be asked for a password on the commandline to safely store your credentials.</p> <pre><code>Enter encryption password for account configuration '&lt;shortname&gt;':\nConfirm encryption Password:\n</code></pre> <p>Note: You need to run the webbrowser on the same host as the <code>oidc-gen</code> command. \\ If you operate on a remote machine, you need to use the device code flow, by adding <code>--flow=device</code> to the above commandline.</p> <p>Advanced users may succeed by otherwise ensuring that the browser you are using can connect to the host on which <code>oidc-gen</code> and <code>oidc-agent</code> run on ports 4242, 8080 or 43985.</p>"},{"location":"provider/elixir/","title":"Elixir","text":""},{"location":"provider/elixir/#elixir","title":"Elixir","text":"<p>Elixir supports dynamic registration, but dynamically registered clients will not have any scopes. Therefore users have to either register a client manually (and get approval for the needed scopes) or use a preregistered public client (recommended).</p> <p>Example: <pre><code>$ oidc-gen --pub &lt;shortname&gt;\n[...]\nIssuer [https://login.elixir-czech.org/oidc/]:\nSpace delimited list of scopes [openid profile offline_access]:\nGenerating account configuration ...\naccepted\nTo continue and approve the registered client visit the following URL in a Browser of your choice:\nhttps://[...]\n[...]\nsuccess\nThe generated account config was successfully added to oidc-agent. You don't have to run oidc-add.\nEnter encryption password for account configuration '&lt;shortname&gt;':\nConfirm encryption Password:\n</code></pre></p>"},{"location":"provider/elixir/#advanced-options","title":"Advanced options","text":""},{"location":"provider/elixir/#manual-client-registration","title":"Manual Client Registration","text":"<p>If you register a client manually, please see https://docs.google.com/document/d/1vOyW4dLVozy7oQvINYxHheVaLvwNsvvghbiKTLg7RbY/</p>"},{"location":"provider/elixir/#device-flow","title":"Device Flow","text":"<p>To use the device flow with Elixir, the client has to have the device grant type registered. This is the case for our public client, however, it might most likely not be the case for a manually registered client. To use the device flow instead of the authorization code flow with the preregistered public client include the <code>--flow=device --pub</code> options.</p>"},{"location":"provider/general/","title":"Any Other Provider","text":""},{"location":"provider/general/#a-provider-not-listed","title":"A Provider not Listed","text":"<p>If your provider was not listed above, do not worry - oidc-agent should work with any OpenID Provider. Please follow these steps.</p>"},{"location":"provider/general/#try-dynamic-client-registration","title":"Try Dynamic Client Registration","text":"<p>If you already have a registered client you can see Generate the Account Configuration.</p> <p>Dynamic client registration is not supported by all OpenID Providers, so it might fail. Anyway, try registering a client dynamically by calling oidc-gen and providing the issuer url when being prompted.</p> <p>If dynamic client registration is not supported, oidc-gen will tell you this. In that case you have to register the client manually through the provider's web interface (see Client Configuration Values for help with manual client registration) and then go to Generate the Account Configuration.</p> <p>Some providers have a protected registration endpoint which is not public. If so oidc-agent needs an initial access token for authorization at the endpoint. Please call oidc-gen with the <code>--at</code> option to pass the access token to oidc-gen.</p> <p>When the client was successfully registered the account configuration should be generated automatically and you should be able to save and use it.</p>"},{"location":"provider/general/#generate-the-account-configuration","title":"Generate the Account Configuration","text":"<p>If you registered a client manually call oidc-gen with the <code>-m</code> flag or if you have a file containing the json formatted client configuration pass it to oidc-gen with the <code>-f</code> flag.</p> <p>After entering the required information oidc-agent should be able to generate the account configuration which is then usable.</p>"},{"location":"provider/general/#still-no-success","title":"Still no Success?","text":"<p>If you still were not be able to get oidc-agent working with that provider, please contact the provider or us at https://github.com/indigo-dc/oidc-agent/issues. We will try to figure out if the problem is with oidc-agent or the provider.</p>"},{"location":"provider/google/","title":"Google","text":""},{"location":"provider/google/#google","title":"Google","text":"<p>Google does not support dynamic client registration, but there is a preregistered public client so that account configuration generation is as easy as with dynamic client registration.</p>"},{"location":"provider/google/#quickstart","title":"Quickstart","text":"<p>Example:</p> <pre><code>$ oidc-gen --pub --issuer https://accounts.google.com/ --flow=device &lt;shortname&gt; \nThe following scopes are supported: openid profile\nScopes or 'max' (space separated) [openid profile]: \n[...]\nUsing a browser on any device, visit:\nhttps://www.google.com/device\n[...]\nsuccess\nThe generated account config was successfully added to oidc-agent. You don't have to run oidc-add.\n\nEnter encryption password for account configuration '&lt;shortname&gt;': \nConfirm encryption Password: \n</code></pre>"},{"location":"provider/google/#advanced-options","title":"Advanced options","text":""},{"location":"provider/google/#manual-client-registration","title":"Manual Client registration","text":"<p>A client can be registered manually at https://console.developers.google.com/ There is documentation on how to do this at https://developers.google.com/identity/protocols/OpenIDConnect (just the first section \"Setting up OAuth 2.0\").</p> <p>After the client registration you can download the client configuration as a json file. You can pass this file to <code>oidc-gen</code> using the <code>-f</code> flag. If you don't do this you have to enter the configuration manually (you than have to call <code>oidc-gen</code> with the <code>-m</code> flag).</p>"},{"location":"provider/helmholtz/","title":"Helmholtz AAI","text":""},{"location":"provider/helmholtz/#helmholtz-aai","title":"Helmholtz AAI","text":"<p>Helmholtz AAI does not support dynamic client registration, but there is a preregistered public client which can be used so that account configuration is as easy as with dynamic client registration.</p>"},{"location":"provider/helmholtz/#use-preregistered-public-client","title":"Use Preregistered Public Client","text":"<p>Enter the following command and follow the instructions to take advantage of the preregistered public client: <pre><code>$ oidc-gen --pub --issuer https://login.helmholtz.de/oauth2/ \\\n    --scope \"email \\\n             eduperson_scoped_affiliation \\\n             eduperson_unique_id \\\n             eduperson_assurance \\\n             eduperson_entitlement\" \\\n    &lt;shortname&gt;\n</code></pre> You will need to follow the OIDC-flow, which usually involves authentication in a web-browser. If the browser does not start, you can copy paste the displayed URL. </p> <pre><code>$ oidc-gen --pub --issuer https://login.helmholtz.de/oauth2/ &lt;shortname&gt;\n[...]\nSpace delimited list of scopes [openid profile offline_access]:\nGenerating account configuration ...\naccepted\nTo continue and approve the registered client visit the following URL in a Browser of your choice:\nhttps://[...]\n[...]\nPolling oidc-agent to get the generated account configuration .....\nsuccess\nThe generated account config was successfully added to oidc-agent. You don't have to run oidc-add.\n</code></pre> <p>Finally, you will be be asked for a password on the commandline to safely store your credentials.</p> <pre><code>Enter encryption password for account configuration '&lt;shortname&gt;':\nConfirm encryption Password:\n</code></pre> <p>Note: You need to run the webbrowser on the same host as the <code>oidc-gen</code> command. \\ If you operate on a remote machine, you need to use the device code flow, by adding <code>--flow=device</code> to the above commandline.</p> <p>Advanced users may succeed by otherwise ensuring that the browser you are using can connect to the host on which <code>oidc-gen</code> and <code>oidc-agent</code> run on ports 4242, 8080 or 43985.</p>"},{"location":"provider/helmholtz/#manual-client-registration","title":"Manual Client registration","text":"<ul> <li>Make sure you don\u2019t have an active login in unity and visit the /home endpoint (i.e. https://login.helmholtz.de/home )</li> <li>Don't login</li> <li>Click \"Register a new account\" on the top right</li> <li>Click \"Oauth2/OIDC client Registration\"</li> <li>Specify the required information, but note the following:<ul> <li>\"User name\" is your <code>client_id</code></li> <li>Needs to be globally unique, \"<code>oidc-agent</code>\" will clash. Use       \"<code>oidc-agent_&lt;your name&gt;</code>\" instead. You Must Not include a colon.</li> <li>\"Password credential\" is your <code>client_secret</code></li> <li>\"Service Admin Contact\": <code>Your email address</code></li> <li>\"Service Security Contact\": <code>Your email address</code></li> <li>\"Service DPS URL\": <code>https://github.com/indigo-dc/oidc-agent/blob/master/PRIVACY</code></li> <li>\"Service Description\": <code>https://github.com/indigo-dc/oidc-agent</code></li> <li>\"OAuth client return URL (1)\": <code>http://localhost:4242</code><ul> <li>click \"<code>+</code>\" to add more URLs</li> </ul> </li> <li>\"OAuth client return URL (2)\": <code>http://localhost:8080</code></li> <li>\"OAuth client return URL (3)\": <code>http://localhost:43985</code></li> <li>\"OAuth client return URL (4)\": <code>edu.kit.data.oidc-agent:/redirect</code></li> </ul> </li> </ul> <p>Note also that you have to enter at least one valid redirect uri, even if they are not mandated by Helmholtz AAI (see Client Configuration Values for more information).</p> <p>After the client is registered, call oidc-gen with the <code>-m</code> flag and enter the required information.</p>"},{"location":"provider/iam/","title":"IAM  INDIGO/DEEP","text":""},{"location":"provider/iam/#iam-indigodeepwlcg","title":"IAM (INDIGO/DEEP/WLCG)","text":"<p>IAM supports dynamic registration and a simple call to oidc-gen is therefore enough to register a client and generate the account configuration.</p>"},{"location":"provider/iam/#quickstart","title":"Quickstart","text":"<p>Example: <pre><code>$ oidc-gen &lt;shortname&gt;\n[...]\nIssuer [https://iam-test.indigo-datacloud.eu/]:\nSpace delimited list of scopes [openid profile offline_access]:\nRegistering Client ...\nGenerating account configuration ...\naccepted\nTo continue and approve the registered client visit the following URL in a Browser of your choice:\nhttps://[...]\n[...]\nsuccess\nThe generated account config was successfully added to oidc-agent. You don't have to run oidc-add.\n\nEnter encryption password for account configuration '&lt;shortname&gt;':\nConfirm encryption Password:\n</code></pre></p>"},{"location":"provider/iam/#advanced-options","title":"Advanced options","text":"<p>Instead of using the authorization code flow one could also use the password flow or device flow instead.</p>"},{"location":"provider/iam/#password-flow","title":"Password Flow","text":"<p>Using IAM the password grant type is not supported in dynamic client registration. The client is registered without it and you have to contact the provider to update the client config manually. After that is done, you can run oidc-gen again with the same shortname. oidc-gen should find a temp file and continue the account configuration generation. Afterwards the config is added to oidc-agent  and can be used by oidc-add normally to add and remove the account configuration from the agent. You have to provide the <code>--flow=password</code> option to all calls to <code>oidc-gen</code>.</p>"},{"location":"provider/iam/#device-flow","title":"Device Flow","text":"<p>To use the device flow with IAM simply include the <code>--flow=device</code> option when calling <code>oidc-gen</code>.</p>"},{"location":"provider/kit/","title":"KIT","text":""},{"location":"provider/kit/#kit","title":"KIT","text":"<p>The KIT OIDP supports dynamic client registration, but a special access token is required as authorization. The easiest way is too use the preregistered public client.</p>"},{"location":"provider/kit/#quickstart","title":"Quickstart","text":"<p>Example: <pre><code>$ oidc-gen --pub &lt;shortname&gt;\n[...]\nIssuer [https://oidc.scc.kit.edu/auth/realms/kit/]:\nSpace delimited list of scopes [openid profile offline_access]:\nGenerating account configuration ...\naccepted\nTo continue and approve the registered client visit the following URL in a Browser of your choice:\nhttps://[...]\n[...]\nsuccess\nThe generated account config was successfully added to oidc-agent. You don't have to run oidc-add.\nEnter encryption password for account configuration '&lt;shortname&gt;':\nConfirm encryption Password:\n</code></pre></p> <p>The KIT OpenID Provider issues a new refresh token when the current refresh token was used in the refresh flow (whenever a new access token is issued). When the refresh token   changes oidc-agent has to update the client configuration file and therefore   needs the encryption password. Because with rotating refresh tokens, this will   happen quite often it is recommended to allow oidc-agent to keep the password   in memory by specifying the <code>--pw-store</code> option when loading the account   configuration with <code>oidc-add</code>.</p>"},{"location":"provider/kit/#advanced-options","title":"Advanced options","text":"<p>To get an initial access token please contact the provider. The token can then be used as authorization through the <code>--at</code> option.</p>"},{"location":"provider/known-issues/","title":"Known Issues","text":""},{"location":"provider/known-issues/#known-issues","title":"Known Issues","text":""},{"location":"provider/known-issues/#expiring-refresh-tokens","title":"Expiring Refresh Tokens","text":"<p>oidc-agent assumes that refresh tokens do not expire. But some providers might use refresh tokens that expire after a certain time or when they are not used for a specific time. To prevent the latter use oidc-agent / oidc-token regularly (you can also use a cron job).</p> <p>oidc-agent is able to update a stored refresh token. However, therefore it has to receive a new refresh token from the provider. If a refresh token expired (e.g. because the token was used within the lifetime of that token), use <code>oidc-gen --reauthenticate &lt;short_name&gt;</code> to re-authenticate and update the refresh token.</p>"},{"location":"security/","title":"Security","text":"<p>We take security of <code>oidc-agent</code> serious and put our best effort into making <code>oidc-agent</code> as secure as possible while preserving usability.</p> <p>In the following pages we describe different security aspects.</p>"},{"location":"security/account-configs/","title":"Account Configuration Files","text":""},{"location":"security/account-configs/#account-configuration-files","title":"Account Configuration Files","text":"<p>The generated account configuration files contain sensitive information (i.e. client credentials and the refresh token) and are therefore stored in an encrypted way.</p> <p>There are two options to encrypt account configurations:</p> <ul> <li>via <code>gpg-agent</code></li> <li>password-based</li> </ul> <p>All encryption (except <code>gpg</code>-based) done in the <code>oidc-agent</code> project is done through the <code>libsodium library</code>, which is also used by software such as <code>Discord</code>, <code>RavenDB</code>, or <code>Wire</code>.</p> <p>The encryption uses an <code>XSalsa20</code> stream cipher.</p>"},{"location":"security/agent-locking/","title":"Agent Locking","text":""},{"location":"security/agent-locking/#agent-locking","title":"Agent Locking","text":"<p>The agent can be locked using a locking password. While being locked the only operations allowed are:</p> <ul> <li>checking if the agent is running</li> <li>unlocking the agent   Every other request will result in an error <code>Agent locked</code>. This allows a   user to temporarily forbid all operations / requests without removing the loaded   account configurations.</li> </ul> <p>While the agent is locked, refresh tokens, access tokens, and client credentials are encrypted using the locking password provided by the user.</p> <p>The agent also offers brute force protection. When trying to unlock the agent with a wrong password a small delay is added, which will increase with the number of failed attempts up to 10 seconds.</p>"},{"location":"security/autounload/","title":"Autounload  Lifetime","text":""},{"location":"security/autounload/#autounload-lifetime","title":"Autounload (Lifetime)","text":"<p>Generally, we keep all information in memory as short as possible, but sometimes we have to keep information for a longer time, e.g. the account configuration. Loaded account configurations can be automatically unloaded after a user-defined timespan. A user can use the lifetime option to control how long a configuration will live in the agent, after that time it is automatically unloaded. This feature plays very well with the autoload feature, because it makes it easy to use small lifetimes on default, because an unloaded configuration can be loaded again into the agent without running oidc-add, but simply when it is required. If this is combined with an <code>gpg</code>-based encryption the experience can be further improved.</p>"},{"location":"security/communication/","title":"Communication","text":""},{"location":"security/communication/#communication","title":"Communication","text":"<p>Because the oidc-agent project consists of multiple components and also other applications can interface with <code>oidc-agent</code>, communication between these components is an important part of the project.</p> <p>Other applications (including <code>oidc-gen</code>, <code>oidc-add</code>, and <code>oidc-token</code>) can communicate with <code>oidc-agent</code> through a UNIX domain socket. This socket can be located through the <code>$OIDC_SOCK</code> environment variable.</p> <p>The socket is created when <code>oidc-agent</code> starts. The access control on that socket is handled by the file system. The socket is created with user privileges, allowing every application running as the same user as the user that started <code>oidc-agent</code> to communicate with the agent.</p> <p>A man-in-the-middle attack on this socket would be possible, e.g. using <code>socat</code>. However, it requires an attacker to already have user privileges. Also, sensitive information is encrypted.</p> <p><code>oidc-gen</code> and <code>oidc-add</code> encrypt all their communication with the agent (their communication might contain sensitive information like user credentials (only for <code>oidc-gen</code> when using the password flow), OIDC refresh token, client credentials, lock password, etc.) Communication done with <code>liboidc-agent</code> (including <code>oidc-token</code>) is also encrypted. If an application communicates directly through the UNIX domain socket with <code>oidc-agent</code> encryption is theoretically supported. However, it requires usage of libsodium and the implementation details (used functions, parameters, etc.) are not documented and have to be retrieved from the source.</p> <p>Internally <code>oidc-agent</code> consists of two components that communicate through unnamed pipes. This communication is not encrypted, because it cannot be accessed by other processes.</p>"},{"location":"security/confirmation/","title":"User Confirmation","text":""},{"location":"security/confirmation/#user-confirmation","title":"User Confirmation","text":"<p>When loading an account configuration into the agent using <code>oidc-add</code> a user can specify that he wants to confirm each usage of this configuration. Therefore, an application can only obtain an access token from the agent if the user approves it.</p>"},{"location":"security/credentials/","title":"Credentials","text":""},{"location":"security/credentials/#credentials","title":"Credentials","text":"<p>(User) credentials are very sensitive information and have to be handled with adequate caution.</p>"},{"location":"security/credentials/#user-credentials","title":"User Credentials","text":"<p>The user only has to pass its credentials (for the OpenID Provider) to <code>oidc-agent</code> when using the password flow. This flow has to be explicitly enabled to use it with <code>oidc-gen</code>. Furthermore, it is not even supported by most providers and if, it might require manual approval from an OpenID Provider administrator. It is recommended to use one of the other flows. However, when user credentials are passed to <code>oidc-agent</code> we handle them carefully and keep them as short as possible in memory. Credentials are also overwritten before the memory is freed (see also memory) and on disk only stored in the encrypted account configuration.</p>"},{"location":"security/credentials/#refresh-tokens","title":"Refresh Tokens","text":"<p>OpenID Connect refresh tokens can be used to obtain additional access tokens and must be kept secret. The refresh token is stored encrypted in the account configuration file (s. account configuration files). The refresh token is only read by <code>oidc-gen</code> (during account configuration generation) and <code>oidc-add</code> (when adding a configuration to the agent). When using the autoload feature (see account autoload) also <code>oidc-agent</code> reads the refresh token from the encrypted account configuration file. However, <code>oidc-gen</code> and <code>oidc-add</code> do not use the refresh token, they only pass it to <code>oidc-agent</code>. <code>oidc-agent</code> uses the refresh token to obtain additional access tokens.</p> <p>The agent has to keep the refresh token in memory. However, when it is not used it will be obfuscated, so it is harder to extract it from a memory dump. The password used for this obfuscation is dynamically generated when the agent starts.</p> <p>The refresh token cannot be requested from <code>oidc-agent</code>and is never send to any other application.</p>"},{"location":"security/encryption-passwords/","title":"Encryption Passwords","text":""},{"location":"security/encryption-passwords/#encryption-passwords","title":"Encryption Passwords","text":"<p>Generally, the encryption password provided by the user to encrypt / decrypt account configurations is kept in memory as short as possible. However, <code>oidc-agent</code> can keep them longer in memory ( encrypted) so it can update the configuration file when a provider issues a new refresh token. This option is not enabled on default and has to be enabled explicitly by the user. With oidc-agent 5 this option can be set on a per-issuer basis, and is enabled by default for certain issuers.</p> <p>If the user did not enable any password caching feature and <code>oidc-agent</code> needs an encryption password because it has to update the account configuration file, the user will be prompted for the password. However, if a provider uses rotating refresh tokens, this might be impractical, because the user has to enter his encryption password whenever a new access token is issued. We therefore implemented different password caching features:</p> <ul> <li><code>oidc-agent</code> can keep the encryption password in memory. The encryption   password will be well encrypted; and the password used for this   encryption is dynamically generated when the agent starts. To use this approach use the <code>--pw-store</code> option of   <code>oidc-add</code> or <code>oidc-agent</code> or (recommended) adapt the <code>issuer.config</code>.</li> <li><code>oidc-agent</code> can also retrieve the encryption password from a user   provided command; the output of this command will be used as the   encryption password. The command used will be kept encrypted in   memory, because it is used to obtain the encryption password (potentially) without   any additional checks, it should be treated the same way as the   encryption password itself. Because with this option the user (potentially) does not   have to enter his password at any point (also not when loading the   account configuration with <code>oidc-add</code>) it might be especially useful   when writing scripts. To use this approach use the <code>--pw-cmd</code> option   of <code>oidc-add</code> or <code>oidc-gen</code>.</li> <li><code>oidc-agent</code> can also retrieve the encryption password from a user   provided file; the content of this file will be used as the encryption   password. The filepath used will be kept encrypted in memory, because   it is used to obtain the encryption password without any additional   checks, it should be treated the same way as the encryption password   itself. Because with this option the user does not have to enter his   password at any point (also not when loading the account configuration   with <code>oidc-add</code>) it might be especially useful when writing scripts.   To use this approach use the <code>--pw-file</code> option of <code>oidc-add</code> or   <code>oidc-gen</code>.</li> </ul>"},{"location":"security/final/","title":"Final Note","text":""},{"location":"security/final/#final-note","title":"Final Note","text":"<p>While we do our best to make it as hard as possible to extract any sensitive information from <code>oidc-agent</code>, it is impossible to fully protect any application from an attacker that has the same or even higher rights as the user that runs the application (i.e. <code>oidc-agent</code>).</p>"},{"location":"security/memory/","title":"Memory","text":""},{"location":"security/memory/#memory","title":"Memory","text":"<p>Programming in <code>C</code> always requires caution when it comes to memory security. Because we handle sensitive data, we decided to clear all allocated memory before freeing it. To do this we wrote our own memory allocator (wrapper) and a custom free. By clearing all allocated memory and not only the parts known to be sensitive we ensure that all sensitive data is overwritten before freed. (Even if there is a refresh token as part of a server response.)  Sensitive data on the stack is explicitly overwritten after usage.</p> <p>Refresh tokens and client credentials are the most sensitive information that have to be kept in memory by <code>oidc-agent</code> for the whole time. To make it harder for an attacker to extract this information from the agent, it is obfuscated when not being used. The password used for obfuscation is dynamically generated when the agent starts. Additional encryption is applied when the agent is locked (see Agent Locking).</p>"},{"location":"security/privilege-separation/","title":"Privilege Separation & Architecture","text":""},{"location":"security/privilege-separation/#privilege-separation-architecture","title":"Privilege Separation &amp; Architecture","text":"<p>We followed the security by design principle and split the system\u2019s functionalities into multiple components. In that way we also achieved privilege separation.</p> <p>The oidc-agent project consists of the following components:</p> <ul> <li><code>oidc-agent</code>: The actual agent managing the tokens and performing all communication with the OpenID Provider;   internally also has two components:<ul> <li>oidc-agent-proxy: A proxy daemon that forwards requests to oidc-agent-daemon. It handles encryption passwords and   file access for oidc-agent-daemon when it has to read (autoload) or write (changing refresh token) an account   configuration file.</li> <li>oidc-agent-daemon: The daemon that holds the loaded accounts and performing all communication with the OpenID   Provider</li> </ul> </li> <li><code>oidc-gen</code>: A tool for generating account configuration files for usage with <code>oidc-agent</code> and   <code>oidc-add</code>.</li> <li><code>oidc-add</code>: A tool that loads the account configurations into the agent.</li> <li><code>oidc-token</code> and third party applications: Applications that need an OIDC access token can obtain it through the   agent\u2019s API. One example application for obtain access tokens is <code>oidc-token</code>.</li> </ul> <p></p>"},{"location":"security/seccomp/","title":"seccomp","text":""},{"location":"security/seccomp/#seccomp","title":"<code>seccomp</code>","text":"<p>With version 2.0.0 we integrated <code>seccomp</code> into <code>oidc-agent</code> to restrict the system calls that each component is allowed to perform.</p> <p>Seccomp Support was dropped again with version 4.3.0!</p> <p>Users that want to restrict <code>oidc-agent</code> further might want to have a look at AppArmor.</p>"},{"location":"security/tracing/","title":"Tracing","text":""},{"location":"security/tracing/#tracing","title":"Tracing","text":"<p>We disabled the possibility to attach to any oidc-agent component with tracing. (Among others, tracing can be used to get a memory dump). However, this only holds for non privileged users, as root it is still possible to trace oidc-agent and to obtain memory dumps.</p>"},{"location":"usage/","title":"User Guide","text":"<p>Using oidc-agent is made as easy as possible. In case you are lost, oidc-agent and relating components provide a lot of information with their 'help' command, just call <code>oidc-agent --help</code> or refer to this documentation. We will describe all options for each component in detail.</p> <p>You can also check tips for some useful use cases.</p> <p>If you need help with a specific provider please refer to this section.</p>"},{"location":"usage/oidc-add/","title":"oidc-add","text":"<p><code>oidc-add</code> is used to add existing account configurations to the <code>oidc-agent</code>. It also can be used to unload an already loaded configuration from the agent or to give a list of all available account configurations.  Furthermore, the agent can be locked to forbid any operation / request on it.</p>"},{"location":"usage/oidc-add/general/","title":"General Usage","text":""},{"location":"usage/oidc-add/general/#general-usage","title":"General Usage","text":"<p>Account configurations are identified by their shortname, so an account configuration can be added by using that shortname: <pre><code>oidc-add &lt;shortname&gt;\n</code></pre> The user will be prompted for the encryption password and then the account configuration is loaded into the agent. After loading other applications can request an access token for that account configuration from the agent.</p> <pre><code>Usage: oidc-add [OPTION...] ACCOUNT_SHORTNAME | -a | -l | -x | -X | -R\n</code></pre> <p>See Detailed Information About All Options for more information.</p>"},{"location":"usage/oidc-add/options/","title":"Detailed Information About All Options","text":""},{"location":"usage/oidc-add/options/#detailed-information-about-all-options","title":"Detailed Information About All Options","text":"<ul> <li><code>--loaded</code></li> <li><code>--always-allow-idtoken</code></li> <li><code>--confirm</code></li> <li><code>--force</code></li> <li><code>--list</code></li> <li><code>--print</code></li> <li><code>--pw-cmd</code></li> <li><code>--pw-env</code></li> <li><code>--pw-file</code></li> <li><code>--pw-gpg</code></li> <li><code>--pw-prompt</code></li> <li><code>--pw-store</code></li> <li><code>--remove</code></li> <li><code>--remote</code></li> <li><code>--remove-all</code></li> <li><code>--lifetime</code></li> <li><code>--lock</code></li> <li><code>--unlock</code></li> </ul>"},{"location":"usage/oidc-add/options/#-loaded","title":"<code>--loaded</code>","text":"<p>This option is used without a shortname, because it will not load an account configuration. Using this option <code>oidc-add</code> will print out a list of all the account configurations currently loaded in the agent.</p>"},{"location":"usage/oidc-add/options/#-always-allow-idtoken","title":"<code>--always-allow-idtoken</code>","text":"<p><code>oidc-token</code> can also be used to request an id token from the agent. On default such requests have to be approved by the user, since this is only meant as a development tool and other applications should not request id tokens from the agent as id tokens are not meant for authorization. If the <code>--always-allow-idtoken</code> option is specified to <code>oidc-add</code> when an account configuration is loaded, id token requests for that account do not need confirmation by the user.</p>"},{"location":"usage/oidc-add/options/#-confirm","title":"<code>--confirm</code>","text":"<p>On default every application running as the same user as the agent can obtain an access token for every account configuration from the agent. The <code>--confirm</code> option can be used to change this behavior. If that option is used, the user has to confirm each usage of an account configuration, allowing fine grained control from the user. When using this option with <code>oidc-add</code> only that specific account needs confirmation.</p>"},{"location":"usage/oidc-add/options/#-force","title":"<code>--force</code>","text":"<p>On default an account configuration is only loaded if it is not already loaded. The <code>-f</code> or <code>--force</code> option can be used to force a load. This can be used e.g. if the account configuration was changed, or to update the lifetime of the loaded account.</p>"},{"location":"usage/oidc-add/options/#-list","title":"<code>--list</code>","text":"<p>This option is used without a shortname, because it will not load an account configuration. Using this option <code>oidc-add</code> will print out a list of all configured account configurations. Configured means that they are saved on the system and can be loaded with <code>oidc-add</code>; it does not mean that they are currently loaded. To show a list of currently loaded accounts, use <code>--loaded</code>.</p>"},{"location":"usage/oidc-add/options/#-print","title":"<code>--print</code>","text":"<p>Instead of loading the account configuration with the specified shortname, it will decrypt and print this configuration.</p>"},{"location":"usage/oidc-add/options/#-pw-cmd","title":"<code>--pw-cmd</code>","text":"<p>The argument passed has to be a command that prints the encryption password for that account configuration to <code>stdout</code> when executed. E.g. such a command could be <code>echo \"superSecretPassword\"</code>. (Note that this command is not recommended, because the password is logged to your bash history.)</p> <p>The command is used by <code>oidc-add</code> to retrieve the encryption password, so the user will not be prompted for it. Additionally, it will also be used by <code>oidc-agent</code> to get the encryption password when it needs to update the account configuration ( see <code>--pw-store</code> for information on why <code>oidc-agent</code> might need the encryption password).</p> <p>See Encryption Passwords for security related information about the different <code>--pw-*</code> options.</p>"},{"location":"usage/oidc-add/options/#-pw-env","title":"<code>--pw-env</code>","text":"<p>By default <code>oidc-add</code> will prompt the user for an encryption password when it needs to decrypt an account configuration. The option <code>--pw-env</code> can be used to provide the encryption password via an environment variable. The name of the environment variable can be passed to <code>--pw-env</code>. If this option is used without an argument the encryption password is read from the environment variable <code>OIDC_ENCRYPTION_PW</code>.</p>"},{"location":"usage/oidc-add/options/#-pw-file","title":"<code>--pw-file</code>","text":"<p>The argument passed has to be the path to a file that contains the encryption password.</p> <p>The password-file is used by <code>oidc-add</code> to retrieve the encryption password, so the user will not be prompted for it. Additionally, it will also be used by <code>oidc-agent</code> to get the encryption password when it needs to update the account configuration ( see <code>--pw-store</code> for information on why <code>oidc-agent</code> might need the encryption password).</p> <p>See Encryption Passwords for security related information about the different <code>--pw-*</code> options.</p>"},{"location":"usage/oidc-add/options/#-pw-gpg","title":"<code>--pw-gpg</code>","text":"<p>The <code>--pw-gpg</code>, <code>--pw-pgp</code>, <code>--gpg</code>, or <code>--pgp</code> option can be used to indicate that PGP encryption utilizing the <code>gpg-agent</code> should be used. However, with <code>oidc-add</code> this option is usually not needed, because we can detect pgp encryption from the account configuration file.</p>"},{"location":"usage/oidc-add/options/#-pw-prompt","title":"<code>--pw-prompt</code>","text":"<p>This option can be used to change how <code>oidc-add</code> prompts the user for the encryption password. Possible values are <code>cli</code> and <code>gui</code>. The default is <code>cli</code>. <code>gui</code> requires oidc-agent-prompt to be installed.</p>"},{"location":"usage/oidc-add/options/#-pw-store","title":"<code>--pw-store</code>","text":"<p>When this option is provided, the encryption password will be kept in memory by <code>oidc-agent</code> (in an encrypted way). Usually none of the <code>--pw-*</code> options is needed, because <code>oidc-agent</code> does not have to read or update the account configuration file after loading. However, some OpenID Providers might use rotating refresh tokens. This means that for those providers <code>oidc-agent</code> has to update the client configuration file whenever a new access token is retrieved from the OpenID Provider. If none of the <code>--pw-*</code> options are provided, this means that the user will always be prompted to enter the encryption password. Because this can get annoying, it is recommended to use any of the <code>--pw-*</code> options in such a case. For providers that are effected by this we included notes in the Help for different providers.</p> <p>See Encryption Passwords for security related information about the different <code>--pw-*</code> options.</p>"},{"location":"usage/oidc-add/options/#-remove","title":"<code>--remove</code>","text":"<p>The <code>--remove</code> option is used to unload an account configuration. After unloading an account, it is no longer available for other applications. Therefore, it has to be loaded again before an access token can be obtained (either using oidc-add or through the autoload feature).</p>"},{"location":"usage/oidc-add/options/#-remote","title":"<code>--remote</code>","text":"<p>This option is used to communicate with a remote <code>oidc-agent-server</code> instead of a local <code>oidc-agent</code>. It can only be used for loading and unloading configurations. For more information refer to <code>oidc-agent-server</code></p>"},{"location":"usage/oidc-add/options/#-remove-all","title":"<code>--remove-all</code>","text":"<p>With the <code>--remove-all</code> option all loaded account configuration can be unloaded from the agent with just one call. This might be preferred over restarting the agent, because that way the agent will still be available everywhere.</p>"},{"location":"usage/oidc-add/options/#-lifetime","title":"<code>--lifetime</code>","text":"<p>The <code>--lifetime</code> option can be used to set a lifetime for the loaded account configuration. This way the account configuration will only be loaded for a limited time after which it is automatically removed from the agent. If a default lifetime was specified when the agent was started, the <code>oidc-add</code> option has priority and can overwrite the default lifetime for this account.</p> <p>Using <code>--lifetime=0</code> means that the account configuration is not automatically removed. Because that's the default behavior this option is only needed, if another default lifetime was specified with oidc-agent.</p>"},{"location":"usage/oidc-add/options/#-lock","title":"<code>--lock</code>","text":"<p>The agent can be locked using the <code>--lock</code> option. While being locked the agent refuses all requests. This means that no account configuration can be loaded / unloaded and no token can be obtained from the agent. Sensitive information will be encrypted when the agent is locked (see also Memory Encryption).</p>"},{"location":"usage/oidc-add/options/#-unlock","title":"<code>--unlock</code>","text":"<p>To unlock a locked agent the <code>--unlock</code> option is used. After unlocking the agent again accepts requests.</p>"},{"location":"usage/oidc-agent/","title":"oidc-agent","text":"<p>oidc-agent is the central comment of the oidc-agent tools. It manages all OpenID Connect communication with the OpenID Providers. Other applications can request access tokens from the agent.</p>"},{"location":"usage/oidc-agent/general/","title":"General Usage","text":""},{"location":"usage/oidc-agent/general/#general-usage","title":"General Usage","text":"<pre><code>Usage: oidc-agent [OPTION...] \n</code></pre> <p>See Detailed Information About All Options for more information.</p>"},{"location":"usage/oidc-agent/options/","title":"Detailed Information About All Options","text":""},{"location":"usage/oidc-agent/options/#short-information-about-all-options","title":"Short Information About All Options","text":"Option Effect <code>--socket-path</code> Use this path for the UNIX-domain socket. <code>--always-allow-idtoken</code> Always allow id-token requests without manual approval by the user <code>--confirm</code> Requires user confirmation when an application requests an access token for any loaded <code>--console</code> Runs <code>oidc-agent</code> on the console, without daemonizing <code>--debug</code> Sets the log level to DEBUG <code>--json</code> Print agent socket and pid as JSON instead of bash <code>--kill</code> Kill the current agent (given by the OIDCD_PID environment variable) <code>--no-autoload</code> Disables the autoload feature: A token request cannot load the needed configuration <code>--no-autoreauthenticate</code> Disables the automatic re-authentication feature <code>--no-scheme</code> <code>oidc-agent</code> will not use a custom uri scheme redirect [Only applies if authorization code flow is used] <code>--no-webserver</code> <code>oidc-agent</code> will not start a webserver [Only applies if authorization code flow is used] <code>--pid-file</code> If set the agent's pid is written to this file <code>--quiet</code> Disable informational messages to stdout <code>--restart-on-update</code> Enables automatic restart of the agent if its binary changes <code>--lifetime</code> Sets a default value in seconds for the maximum lifetime of account configurations [..] <code>--log-stderr</code> Additionally prints log messages to stderr <code>--status</code> Connects to the currently running agent and prints status information <code>--with-group</code> Applications running under another user can access the agent [..]"},{"location":"usage/oidc-agent/options/#detailed-explanation-about-all-options","title":"Detailed explanation About All Options","text":""},{"location":"usage/oidc-agent/options/#-socket-path","title":"<code>--socket-path</code>","text":"<p>By default <code>oidc-agent</code> creates the UNIX-domain socket at <code>$TMPDIR/oidc-XXXXXX/oidc-agent.&lt;ppid&gt;</code>, where <code>&lt;ppid&gt;</code> is the parent's process id and <code>XXXXXX</code> is a randomly generated. The <code>-a</code> or <code>--socket-path</code> or <code>--bind-address</code> option can be used to change the location where this UNIX-domain socket is created. Please note the following:</p> <ul> <li>If the passed argument has no trailing slash, the last part is the socket's filename.</li> <li>If the passed argument has a trailing slash, the socket will be created with a filename of <code>oidc-agent.&lt;ppid&gt;</code> in the   passed directory.</li> <li>If the passed argument contains <code>XXXXXX</code> as the last part of one of the directories, the <code>XXXXXX</code> will be replaced   with randomized characters. Example:</li> <li>The passed directory may not exist (<code>oidc-agent</code> can create the directory (including parents)).</li> <li>If a non-randomized path is passed and a socket already exists there, <code>oidc-agent</code> will overwrite it.</li> </ul> <p>In the following we present some examples of the passed argument and the resulting full socket path:</p> <ul> <li><code>/tmp/oidc-agent</code> -&gt; <code>/tmp/oidc-agent</code></li> <li><code>/tmp/oidc-agent/</code> -&gt; <code>/tmp/oidc-agent/oidc-agent.1234</code></li> <li><code>/tmp/oidc-agent-XXXXXX/</code> -&gt; <code>/tmp/oidc-agent-s4jdi2/oidc-agent.1234</code></li> <li><code>/tmp/oidc-agent-XXXXXX/socket</code> -&gt; <code>/tmp/oidc-agent-s4jdi2/socket</code></li> <li><code>/tmp/oidc-agent-XXXXXX/socket/</code> -&gt; <code>/tmp/oidc-agent-s4jdi2/socket/oidc-agent.1234</code></li> <li><code>/tmp/XXXXXX-agent/</code> -&gt; <code>tmp/XXXXXX-agent/oidc-agent.1234</code></li> </ul>"},{"location":"usage/oidc-agent/options/#-always-allow-idtoken","title":"<code>--always-allow-idtoken</code>","text":"<p><code>oidc-token</code> can also be used to request an id token from the agent. On default such requests have to be approved by the user, since this is only meant as a development tool and other applications should not request id tokens from the agent as they are not meant for authorization. If the <code>--always-allow-idtoken</code> option is specified id token requests do not need confirmation by the user.</p>"},{"location":"usage/oidc-agent/options/#-confirm","title":"<code>--confirm</code>","text":"<p>On default every application running as the same user as the agent can obtain an access token for every account configuration from the agent. The <code>--confirm</code> option can be used to change this behavior. If that option is used, the user has to confirm each usage of an account configuration, allowing fine grained control from the user. The <code>--confirm</code> option can be used when loading an account configuration through <code>oidc-add</code>, in that case only that specific account needs confirmation, or when starting the agent. If the option is used with the agent, every usage of every account configuration has to be approved by the user.</p>"},{"location":"usage/oidc-agent/options/#-console","title":"<code>--console</code>","text":"<p>Usually <code>oidc-agent</code> runs in the background as a daemon. This option will skip the daemonizing and run on the console. This might be sued for debugging.</p>"},{"location":"usage/oidc-agent/options/#-debug","title":"<code>--debug</code>","text":"<p>This increases the log level to <code>DEBUG</code> and obviously should only be used to debug purposes. If enabled, sensitive information (among others refresh tokens and client credentials) are logged to the system log.</p>"},{"location":"usage/oidc-agent/options/#-json","title":"<code>--json</code>","text":"<p>Enables json output for values like agent socket and pid. Useful when starting the agent via scripts.</p>"},{"location":"usage/oidc-agent/options/#-kill","title":"<code>--kill</code>","text":"<p>This will kill the currently running agent. The agent to be killed is identified by the <code>OIDCD_PID</code> environment variable. When integrated with Xsession this will kill the agent available in all terminals. A restarted agent will not automatically be available in already existing or new terminals. You can use <code>oidc-keychain</code> to make a newly started agent available in new terminals or login sessions.</p>"},{"location":"usage/oidc-agent/options/#-no-autoload","title":"<code>--no-autoload</code>","text":"<p>On default account configurations can automatically be loaded if needed. That means that an application can request an access token for every account configuration. If it is not already loaded the user will be prompted to enter the needed encryption password. After the user enters the password the account configuration is loaded and an access token returned to the application. the user can also cancel the autoload.</p> <p>With <code>--no-autoload</code> enabled the agent will not load currently not loaded account configuration for which an access token is requested. The user then first has to add them manually by using <code>oidc-add</code>, before an application can obtain an access token for those.</p>"},{"location":"usage/oidc-agent/options/#-no-autoreauthenticate","title":"<code>--no-autoreauthenticate</code>","text":"<p>It might happen that the refresh token used with an account configuration expires. If this happens <code>oidc-agent</code> is no longer able to provide access tokens to clients. When <code>oidc-agent</code> discovers that a refresh token is expired a helpful message is sent to the client. This message should be displayed to the user and helps solving the problem.</p> <p>However, <code>oidc-agent</code> is also capable of triggering the needed re-authentication automatically. <code>oidc-agent</code> will also do this by default.</p> <p>With <code>--no-autoreauthenticate</code> or <code>--noauto-reauthenticate</code> enabled the agent will not load currently not loaded account configuration for which an access token is requested. The user then first has to add them manually by using <code>oidc-add</code>, before an application can obtain an access token for those.</p>"},{"location":"usage/oidc-agent/options/#-no-scheme","title":"`--no-scheme","text":"<p>This option can be used when the authorization code flow is performed. The <code>--no-scheme</code> option tells <code>oidc-agent</code> that a custom uri scheme should never be used for redirection (for any account configuration). Normally a custom uri scheme can be used to redirect direct to (another) oidc-gen instance when performing the authorization code flow instead of using a web server. However, the redirect to oidc-gen requires a graphical desktop environment. If this is not present, redirection with custom uri schemes can be disabled with this option.</p>"},{"location":"usage/oidc-agent/options/#-no-webserver","title":"<code>--no-webserver</code>","text":"<p>This option can be used when the authorization code flow is performed. On default a small webserver is started by <code>oidc-agent</code> to be able to catch the redirect and complete the authorization code flow. The <code>--no-webserver</code> option tells <code>oidc-agent</code> that no webserver should be started (for any account configuration). The authorization code flow can still be completed. Either by using a redirect uri that follows the custom redirect uri scheme <code>edu.kit.data.oidc-agent:/&lt;path&gt;</code> - this will directly redirect to oidc-gen, or by copying the url the browser would normally redirect to and pass it to <code>oidc-gen --codeExchange</code>.</p>"},{"location":"usage/oidc-agent/options/#-pid-file","title":"<code>--pid-file</code>","text":"<p>On default the agent outputs commands that - when executed - set certain environment variables. The <code>$OIDCD_PID</code> variable then contains the agent's process id, which is used by <code>oidc-agent -k</code> to stop that agent. For <code>oidc-agent-service</code> and maybe other tools the mechanism of an environment variable might not be sufficient and a pid file might be preferred.</p> <p>Through the <code>--pid-file</code> option a file can be passed. If given the agent's pid is written to this file and other applications might use it.</p>"},{"location":"usage/oidc-agent/options/#-quiet","title":"<code>--quiet</code>","text":"<p>Silences informational messages. Currently only has effect on the generated bash echo when setting agent environments.</p>"},{"location":"usage/oidc-agent/options/#-restart-on-update","title":"<code>--restart-on-update</code>","text":"<p>If enabled, the agent automatically restart after a (package) update. The agent will observe it's binary using <code>inotify</code>. When the file is changed (via a move), the agent restarts.</p> <p>This option is included by default when the agent is started via <code>oidc-agent-service</code>.</p> <p>It does not work with a non-daemonized agent and is generally only useful when the agent is started with <code>oidc-agent-service</code> or the socket path is persisted in another way.</p>"},{"location":"usage/oidc-agent/options/#-lifetime","title":"<code>--lifetime</code>","text":"<p>The <code>--lifetime</code> option can be used to set a default lifetime for all loaded account configurations. This way all account configurations will only be loaded for a limited time after which they are automatically removed from the agent. When loading an account configuration with <code>oidc-add</code> this lifetime can be overwritten. So that a specific account configuration can be loaded with another lifetime (lower, higher, and also infinite).</p> <p>Using <code>--lifetime=0</code> means that account configuration are not automatically removed and they are kept loaded for an infinite time. This is also the default behavior.</p>"},{"location":"usage/oidc-agent/options/#-log-stderr","title":"<code>--log-stderr</code>","text":"<p>The <code>--log-stderr</code> option allows log messages to be printed to <code>stderr</code>. Note that the log messages are still logged to <code>syslog</code> as usual. This option is intended for debug purposes and is usually combined with <code>-d</code>.</p>"},{"location":"usage/oidc-agent/options/#-status","title":"<code>--status</code>","text":"<p>The <code>--status</code> option can be used to obtain information about a currently running agent. Therefore, the <code>OIDC_SOCK</code> environment variable must be set. The option prints information such as:</p> <ul> <li>the version of the running agent (this is useful to check what agent version is currently running and it might differ   from the version installed)</li> <li>options that can be set on start up</li> <li>the loaded accounts</li> </ul>"},{"location":"usage/oidc-agent/options/#-with-group","title":"<code>--with-group</code>","text":"<p>On default only applications that run under the same user that also started the agent can obtain tokens from it. The <code>--with-group</code> option can be used to also allow other applications access to the agent. This can be useful in cases where applications must run under a specific user. The user first has to create a group (e.g. named <code>oidc-agent</code>) and add himself and all other users that need access to the agent to this group. It is the user's responsibility to manage this group. Then he can pass the group name to the <code>--with-group</code> option to allow all group members access to the agent. If the option is used without providing a group name, the default is <code>oidc-agent</code>.</p>"},{"location":"usage/oidc-agent/start/","title":"Starting oidc-agent","text":""},{"location":"usage/oidc-agent/start/#starting-oidc-agent","title":"Starting oidc-agent","text":"<p>As described in Xsession integration, by default oidc-agent is integrated with Xsession. Therefore, it is automatically started and available in all terminals through that session. So usually a user does not have to start oidc-agent. </p> <p>After installing oidc-agent the agent will not be automatically available. After a system restart the agent can be used in all terminals.</p> <p>The agent can also be started by using: <pre><code>oidc-agent\n</code></pre> This will print out shell commands which have to be executed in the shell where you want to run oidc-add, oidc-gen, and any application using oidc-agent.</p> <p>To start oidc-agent and directly set the needed environment variables you can use: <pre><code>eval `oidc-agent`\n</code></pre></p>"},{"location":"usage/oidc-agent-service/","title":"oidc-agent-service","text":"<p><code>oidc-agent-service</code> can be used to easily restart <code>oidc-agent</code>. <code>oidc-agent-service</code> is called in the same way as <code>oidc-agent</code>, this means that <code>oidc-agent-service</code> will print out the needed shell commands to set environment variables. Therefore <code>oidc-agent-service</code> is usually called with <code>eval</code> or its output is piped to a file.</p>"},{"location":"usage/oidc-agent-service/#quick-start","title":"Quick Start","text":"<p>Make <code>oidc-agent</code> available in the current terminal:</p> <pre><code>eval `oidc-agent-service use`\n</code></pre> <p>Restart the agent (it will still be usable in all terminals as before after the restart):</p> <pre><code>oidc-agent-service restart-s\n</code></pre>"},{"location":"usage/oidc-agent-service/#configuration","title":"Configuration","text":"<p>The behavior of <code>oidc-agent-service</code> can be configured through a configuration file. Among others, this file can be used to set the command line options used when starting the agent. The system-wide configuration file <code>/etc/oidc-agent/oidc-agent-service.options</code> can be adapted to change the behavior of <code>oidc-agent-service</code> for the whole system. You can also add a <code>oidc-agent-service.options</code> file to your oidc-agent directory. Options specified in this file will overwrite any option defined in <code>/etc/oidc-agent/oidc-agent-service.options</code>.</p> <p>Please note that with oidc-agent 5 a proper configuration file was introduced; therefore, it is possible to configure the started agent through that file. However, the above mentioned way is still supported. An overwrites options specified in the configuration file.</p>"},{"location":"usage/oidc-agent-service/#commands","title":"Commands","text":""},{"location":"usage/oidc-agent-service/#use","title":"<code>use</code>","text":"<p><code>use</code> will give you an usable agent. This is usually the command you want to use to start an agent. It starts an agent and makes it available (it prints the needed environment variables). If <code>oidc-agent-service</code> has already started an agent for you, this agent will we reused and made available.</p>"},{"location":"usage/oidc-agent-service/#start","title":"<code>start</code>","text":"<p><code>start</code> starts an agent. If <code>oidc-agent-service</code> already started an agent, <code>start</code> will fail. If you want to reuse that agent in this case, use <code>use</code>.</p>"},{"location":"usage/oidc-agent-service/#restart","title":"<code>restart</code>","text":"<p><code>restart</code> restarts the agent. This means that the current agent is stopped and a new agent is started. On default the new agent is started with the same options as the old one. This behaviour can be changed (see configuration).</p>"},{"location":"usage/oidc-agent-service/#restart-s","title":"<code>restart-s</code>","text":"<p><code>restart-s</code> is the same as <code>restart</code>, but does not print any output. Therefore, you can call <code>oidc-agent-service restart-s</code> instead of <code>eval `oidc-agent-service restart-s`</code>.</p>"},{"location":"usage/oidc-agent-service/#stop","title":"<code>stop</code>","text":"<p><code>stop</code> stops the running agent.</p>"},{"location":"usage/oidc-agent-service/#kill","title":"<code>kill</code>","text":"<p>Same as <code>stop</code>.</p>"},{"location":"usage/oidc-gen/","title":"oidc-gen","text":"<p><code>oidc-gen</code> is used to generate new account configuration. These account configurations are needed and used by oidc-agent. They can be loaded with <code>oidc-add</code> into the agent. And then any application can request an access token for that account configuration.</p> <p>Account configurations are identified by a shortname. This shortname can be set to anything, but it is recommended to use a descriptive name of the provider / account used. E.g. a shortname for an account configuration for the DEEP Hybrid Datacloud could be 'deep'; for Google it could be 'google' or if a user has multiple Google accounts it could be something like 'google-work' and 'google-personal'. Usually it is enough the generate such an account configuration only once.</p> <p>For <code>oidc-gen</code> there are a lot of options. We will cover all of them in detail under the point Detailed Information About All Options. To get help with generating an account configuration for a specific provider refer to Integrate With different Providers or if you have to register a client manually refer to Client Configuration Values.</p>"},{"location":"usage/oidc-gen/general/","title":"General Usage","text":""},{"location":"usage/oidc-gen/general/#general-usage","title":"General Usage","text":"<p>Usually <code>oidc-gen</code> is used in one of two ways: Using dynamic client registration (default) or using an already registered client (<code>-m</code>). For providers that support dynamic client registration a simple call to <code>oidc-gen</code> is enough. You can also directly provide the shortname of the new account configuration: <code>oidc-gen &lt;shortname&gt;</code> After a successful account configuration generation oidc-gen will save the encrypted account configuration file in the oidc-agent directory using the shortname as the filename.</p> <pre><code>Usage: oidc-gen [OPTION...] [ACCOUNT_SHORTNAME]\n</code></pre> <p>Internal options are not considered part of the public API, even if listed for completeness. They can change at any time without backward compatibility considerations.</p> <p>See Detailed Information About All Options for more information.</p>"},{"location":"usage/oidc-gen/general/#client-registration","title":"Client Registration","text":"<p><code>oidc-agent</code> requires a registered client for every OpenID Provider used. Most likely a user does not have an already registered client and does not want to do it through a web interface. If the OpenID Provider supports dynamic client registration, the agent can register a new client dynamically. One big advantage of using dynamic registration is the fact that oidc-agent will register the client with exactly the configuration it needs. Dynamic Registration is the default option and running <code>oidc-gen</code> is enough.</p> <p>If a user already has a client registered or the OpenID Provider does not support dynamic client registration <code>oidc-gen</code> must be called with the <code>-m</code> option. <code>oidc-gen</code> will prompt the user for the relevant information. If the user has a file with the client configuration information they can pass it to oidc-gen using the <code>-f</code> flag. When registering a client manually be careful with the provided data. Check Client Configuration Values for the values that are important to oidc-agent.</p> <p>See Provider Info on how to generate an account configuration for a specific provider.</p>"},{"location":"usage/oidc-gen/general/#oidc-gen-and-oidc-add","title":"oidc-gen and oidc-add","text":"<p><code>oidc-gen</code> will also add the generated configuration to the agent. So you don't have to run <code>oidc-add</code> afterwards. However, if you want to load an existing configuration don't use <code>oidc-gen</code> for it; <code>oidc-add</code> is your friend.</p>"},{"location":"usage/oidc-gen/general/#edit-an-existing-account-configuration","title":"Edit an existing account configuration","text":"<p>To edit an existing configuration, call <code>oidc-gen -m &lt;shortname&gt;</code> where <code>&lt;shortname&gt;</code> is the short name for that configuration.</p> <p>If you only have to update the refresh token and do not want to change any other data for this account configuration, use <code>oidc-gen --reauthenticate &lt;shortname&gt;</code>.</p>"},{"location":"usage/oidc-gen/options/","title":"Detailed Information About All Options","text":""},{"location":"usage/oidc-gen/options/#detailed-information-about-all-options","title":"Detailed Information About All Options","text":"<p>General Options:</p> <ul> <li><code>--accounts</code></li> <li><code>--codeExchange</code></li> <li><code>--confirm-default</code></li> <li><code>--confirm-no</code></li> <li><code>--confirm-yes</code></li> <li><code>--cp</code></li> <li><code>--delete</code></li> <li><code>--file</code></li> <li><code>--flow</code></li> <li><code>--manual</code></li> <li><code>--mytoken</code></li> <li><code>--mytoken-profile</code></li> <li><code>--no-save</code></li> <li><code>--no-scheme</code></li> <li><code>--no-url-call</code></li> <li><code>--no-webserver</code></li> <li><code>--oauth2</code></li> <li><code>--only-at</code></li> <li><code>--print</code></li> <li><code>--prompt</code></li> <li><code>--pub</code></li> <li><code>--pw-cmd</code></li> <li><code>--pw-env</code></li> <li><code>--pw-file</code></li> <li><code>--pw-gpg</code></li> <li><code>--pw-prompt</code></li> <li><code>--reauthenticate</code></li> <li><code>--rename</code></li> <li><code>--update</code></li> </ul> <p>Options for specifying information on the command line:</p> <ul> <li><code>--at</code></li> <li><code>--aud</code></li> <li><code>--client-id</code></li> <li><code>--client-secret</code></li> <li><code>--cnid</code></li> <li><code>--configuration-endpoint</code></li> <li><code>--dae</code></li> <li><code>--issuer</code></li> <li><code>--mytoken-profile</code></li> <li><code>--mytoken-url</code></li> <li><code>--op-password</code></li> <li><code>--op-username</code></li> <li><code>--port</code></li> <li><code>--redirect-uri</code></li> <li><code>--rt</code></li> <li><code>--rt-env</code></li> <li><code>--scope</code></li> <li><code>--scope-all</code></li> <li><code>--scope-max</code></li> </ul>"},{"location":"usage/oidc-gen/options/#-accounts","title":"<code>--accounts</code>","text":"<p>Using this option <code>oidc-gen</code> will print out a list of all configured account configurations. Configured means that they are saved on the system and can be loaded with <code>oidc-add</code>; it does not mean that they are currently loaded. This option is the same as <code>oidc-add --list</code>. To show a list of the accounts that are currently loaded use <code>oidc-add --loaded</code>.</p>"},{"location":"usage/oidc-gen/options/#-codeexchange","title":"<code>--codeExchange</code>","text":"<p>When using the authorization code flow the user has to authenticate against the OpenID Provider in a web browser and is then redirected back to the application. To be able to catch that redirect <code>oidc-agent</code> usually starts a small webserver. If something goes wrong during the redirect (because the web server crashed or no web server was used (<code>--no-webserver</code>)) the user can still finish the account configuration generation process. In such a case the user must copy the url he is redirected to from its browser and pass it to <code>oidc-gen --codeExchange</code>. Then oidc-gen should be able to obtain and save the final account configuration.</p> <p>Note that while this option also works for <code>edu.kit.data.oidc-agent:/</code> redirect uris, it might not be possible to obtain the uri the user is redirected to from the browser.</p>"},{"location":"usage/oidc-gen/options/#-confirm-default","title":"<code>--confirm-default</code>","text":"<p>When specifying this option all confirmation/consent prompts are automatically answered with the default value. This option is useful when you want to use <code>oidc-gen</code> non-interactive.</p> <p>Examples for confirmation prompts are:</p> <ul> <li>When creating a new account configuration using dynamic client registration and the process is not finished but the   client already registered and the process is started again it is possible to reuse the already registered client. In   that case <code>oidc-gen</code> asks to use the temporary stored data.   (Default: yes)</li> <li>When deleting an account configuration, <code>oidc-gen</code> asks if you are sure.   (Default: no)</li> <li>When deleting an account configuration that used dynamic client registration,   <code>oidc-gen</code> asks to delete the client at the provider. (Default: yes)</li> <li>When deleting an account configuration, the associated refresh token will be automatically deleted. In case this is   not possible, <code>oidc-gen</code> asks if it should continue or not. (Default: no)</li> </ul>"},{"location":"usage/oidc-gen/options/#-confirm-no","title":"<code>--confirm-no</code>","text":"<p>When specifying this option all confirmation/consent prompts are automatically declined. This option is useful when you want to use <code>oidc-gen</code> non-interactive.</p> <p>For examples for confirmation prompts, see <code>--confirm-default</code>.</p>"},{"location":"usage/oidc-gen/options/#-confirm-yes","title":"<code>--confirm-yes</code>","text":"<p>When specifying this option all confirmation/consent prompts are automatically answered with <code>yes</code>. This option is useful when you want to use <code>oidc-gen</code> non-interactive.</p> <p>For examples for confirmation prompts, see <code>--confirm-default</code>.</p>"},{"location":"usage/oidc-gen/options/#-cp","title":"<code>--cp</code>","text":"<p>This option allows the user to change the CA bundle file that is used to verify SSL/TLS certificates. A user must use this option when <code>oidc-gen</code> cannot automatically find a proper CA bundle file (e.g. non default location). A user can also use this option to provide a more restricted bundle file that only contains the certificates needed for a specific provider.</p>"},{"location":"usage/oidc-gen/options/#-delete","title":"<code>--delete</code>","text":"<p>This option will delete the account configuration for the specified shortname. It will also revoke the used refresh token and optionally delete the OIDC client (not implemented yet).</p>"},{"location":"usage/oidc-gen/options/#-file","title":"<code>--file</code>","text":"<p>Can be used if the client was registered manually. Most OpenID Provider allow downloading the client configuration as a json file (or copy the <code>JSON</code> config). Such a file can be used to reduce the amount of information passed to <code>oidc-gen</code>. The argument should be the absolute path to a file containing the <code>JSON</code> formatted client configuration. <code>oidc-gen</code> then reads the client configuration from this file, so that the user does not have to enter all information manually.</p> <p>Because this option is only used when a client was registered manually, it implicitly sets the <code>--manual</code> option.</p>"},{"location":"usage/oidc-gen/options/#-flow","title":"<code>--flow</code>","text":"<p>Depending on the OpenID Provider a user can use multiple OpenID/OAuth2 flows to obtain a refresh token. <code>oidc-agent</code> uses the Refresh Flow to obtain additional access token. Therefore a refresh token is required which can be obtained in multiple ways. The <code>--flow</code> flag can be used to enforce usage of a specific flow or to prioritise a flow over another. <code>oidc-agent</code> will try all flows in the following order until one succeeds:</p> <ol> <li>Refresh Flow</li> <li>Password Flow</li> <li>Authorization Code Flow</li> <li>Device Flow</li> </ol> <p>Possible values for the <code>--flow</code> option are: 'refresh', 'password', 'code', and 'device'. The flag can also be used if multiple flows should be tried, but in a different order than the default one. To do so provide the option multiple times with one value per option in the desired order.</p> <p>In the following we will describe the different flows:</p>"},{"location":"usage/oidc-gen/options/#out-of-band","title":"Out Of Band","text":"<p>If a user obtained a refresh token out of band he can directly provide it to <code>oidc-gen</code> using the <code>--rt</code> option. The <code>--flow=refresh</code> option is then implicitly set.</p> <p>Note: Refresh tokens are bound to a specific client id. The provided refresh token must be issued for the provided client id.</p> <p>Obtaining a valid refresh token for the specific client id is out of scope of this documentation. We recommend one of the following flows.</p>"},{"location":"usage/oidc-gen/options/#password-flow","title":"Password Flow","text":"<p>Most OIDPs do not support this flow. One provider that supports the password flow is INDIGO IAM, for additional information on support of the password flow for a specific provider see the documentation for different providers. The password flow can be performed using only the command line. The credentials for the OpenID Provider have to be provided to <code>oidc-gen</code>. The credentials are only used to obtain the refresh token and are not stored. However, there are alternatives flows that do not reveal the user's credentials to <code>oidc-agent</code>.</p>"},{"location":"usage/oidc-gen/options/#authorization-code-flow","title":"Authorization Code Flow","text":"<p>The authorization code flow is the most widely used and is therefore supported by any OpenID Provider and does not reveal user credentials to <code>oidc-agent</code>. However, it requires a browser on the system running <code>oidc-agent</code> and <code>oidc-gen</code>. If you don't have a browser on that system or don't want to use it you can use the Device Flow, if supported by the provider. If the authorization code flow is the only flow supported by your provider and have to obtain a working account configuration on a machine that does not have a browser (e.g. a server), you can create the account configuration on another machine and copy / move the account configuration file to the server.</p> <p>To use the Authorization Code Flow at least one redirect uri has to be provided ( see Redirect Uri). The redirect uri must be of the scheme <code>http://localhost:&lt;port&gt;</code>. It is recommend to use a port which is very unlikely to be used by any other application (during the account generation process). Additionally multiple redirect uris can be provided.</p> <p>When starting the account generation process <code>oidc-agent</code> will try to open a webserver on the specified ports. If one port fails the next one is tried. After a successful startup <code>oidc-gen</code> will receive an authorization URI. When calling this URI the user has to authenticate against the OpenID Provider; afterwards the user is redirected to the previously provided redirect uri where the agent's webserver is waiting for the response. The agent receives an authorization code that is exchanged for the required token. <code>oidc-gen</code> is polling <code>oidc-agent</code> to get the generated account configuration and finally save it.</p>"},{"location":"usage/oidc-gen/options/#device-flow","title":"Device Flow","text":"<p>The device flow is a flow specifically for devices with limited input possibilities or without a web browser. Unfortunately, it is currently not supported by many OpenID Providers.</p> <p>To use the device flow the user has to call <code>oidc-gen</code> with the <code>--flow=device</code> option. <code>oidc-gen</code> will print a verification url and an user code. If <code>qrencode</code> is installed on the system, the verification url is also printed as a QR-Code. The user must open the given url using a second device and enter the given user code. Through polling the agent will get a refresh token and <code>oidc-gen</code> the generated account configuration.</p> <p>If the OpenID Provider does not provide the device authorization endpoint in their openid-configuration it has to provided manually using the <code>--dae</code> option. For help on a specific provider check the provider documentation</p>"},{"location":"usage/oidc-gen/options/#-manual","title":"<code>--manual</code>","text":"<p>This option has to be used if a user wants to use a manually registered client. <code>oidc-gen</code> will then not use dynamic client registration. Additional metadata about the already registered client must be passed to <code>oidc-gen</code> when beeing prompted or using command line arguments (where they are available).</p>"},{"location":"usage/oidc-gen/options/#-mytoken","title":"<code>--mytoken</code>","text":"<p>The <code>--mytoken</code> or <code>--mytoken-profile</code> options can be used to create a mytoken account configuration instead of a normal OIDC one. This means that instead of a OIDC refresh token the agent uses a mytoken to obtain access tokens. Also in this case the agent communicates only with the mytoken instance and not directly with the OP. If the obtained mytoken has the <code>create_mytoken</code> capability other applications can also request mytokens from the agent, but mytokens are not given out without user consent.</p> <p>The option takes as an optional argument a mytoken profile which specifies the desired properties of the obtained mytoken.</p>"},{"location":"usage/oidc-gen/options/#-no-save","title":"<code>--no-save</code>","text":"<p>If this option is used, no config files (i.e. no account configuration file) are stored, i.e. as soon as the config is unloaded from the agent (e.g. when it stops) the configuration is gone.</p>"},{"location":"usage/oidc-gen/options/#-no-scheme","title":"<code>--no-scheme</code>","text":"<p>This option can be used when the authorization code flow is performed. The <code>--no-scheme</code> option tells <code>oidc-agent</code> that a custom uri scheme should not be used for redirection. Normally a custom uri scheme can be used to redirect direct to (another) oidc-gen instance when performing the authorization code flow instead of using a web server. However, the redirect to oidc-gen requires a graphical desktop environment. If this is not present, redirection with custom uri schemes can be disabled with this option.</p> <p>This option can be used with <code>oidc-gen</code> or <code>oidc-agent</code>. When using it with <code>oidc-gen</code> it will only disable custom uri schemes for that specific call; when using it with <code>oidc-agent</code> it will disable custom uri schemes for all calls to that <code>oidc-agent</code> instance.</p>"},{"location":"usage/oidc-gen/options/#-no-url-call","title":"<code>--no-url-call</code>","text":"<p>When using the authorization code flow the user must authenticate against the OpenID Provider using a webbrowser. To do this <code>oidc-gen</code> prints an authorization url the user has to open. On default this url is automatically opened in the default webbrowser (using <code>xdg-open</code>). One can disable this behavior with the <code>--no-url-call</code> option. When this option is passed <code>oidc-gen</code> will not automatically open the authorization url. The user then has to manually copy it to his webbrowser.</p>"},{"location":"usage/oidc-gen/options/#-no-webserver","title":"<code>--no-webserver</code>","text":"<p>This option can be used when the authorization code flow is performed. On default a small webserver is started by <code>oidc-agent</code> to be able to catch the redirect and complete the authorization code flow. The <code>--no-webserver</code> option tells <code>oidc-agent</code> that no webserver should be started. The authorization code flow can still be completed. Either by using a redirect uri that follows the custom redirect uri scheme <code>edu.kit.data.oidc-agent:/&lt;path&gt;</code> - this will directly redirect to oidc-gen, or by copying the url the browser would normally redirect to and pass it to <code>oidc-gen --codeExchange</code>.</p> <p>This option can be used with <code>oidc-gen</code> or <code>oidc-agent</code>. When using it with <code>oidc-gen</code> it will only disable the webserver for that specific call; when using it with <code>oidc-agent</code> it will disable the webserver for all calls to that <code>oidc-agent</code> instance.</p>"},{"location":"usage/oidc-gen/options/#-oauth2","title":"<code>--oauth2</code>","text":"<p>The <code>--oauth</code> or <code>--oauth2</code> option can be used with providers that support OAuth2 but not OpenID Connect. This is mainly used so that the <code>openid</code> scope is not required.</p>"},{"location":"usage/oidc-gen/options/#-only-at","title":"<code>--only-at</code>","text":"<p>The <code>--only-at</code> option of <code>oidc-gen</code> can be used to obtain an access token without creating an account configuration. You still have to provide a valid client configuration. There are several ways of doing so. The option can be combined with the different ways of using <code>oidc-gen</code>, but it will not work with dynamic client registration. The following is a short overview:</p> <ul> <li><code>oidc-gen --only-at -m</code> Manually provide the needed information (with prompting)</li> <li><code>oidc-gen --only-at -f &lt;filepath&gt;</code> Manually provide the needed information by passing the path to a json file with the   client information.</li> <li><code>oidc-gen --only-at</code> Use a public client defined in the <code>pubclients.conf</code> file.</li> </ul> <p>Notes:</p> <ul> <li>It's possible to overwrite some or all of the passed values with command line options.</li> <li>You always have to provide the issuer url and the scopes to be used (but can do so in the passed file).</li> <li>When using a public client that does not have a client secret you must pass the <code>--pub</code> option.</li> </ul> <p>Here are three examples how a user can obtain the access token and store it in an environment variable without providing any other information:</p> <pre><code>export AT=`oidc-gen --only-at --iss=&lt;issuer_url&gt; --scope-max --prompt=none` # requires that a public client for &lt;issuer_url&gt; is listed in pubclients.conf\nexport AT=`oidc-gen --only-at --iss=&lt;issuer_url&gt; --client-id=&lt;client_id&gt; --client-secret=&lt;client_secret&gt; --redirect-url=\"http://localhost:8080\" --scope=profile --prompt=none`\nexport AT=`oidc-gen --only-at -f&lt;filepath&gt; --prompt=none`\n</code></pre> <p>In the last call <code>&lt;filepath&gt;</code> points to file with the following content:</p> <pre><code>{\n  \"issuer_url\": \"https://example.com\",\n  \"client_id\": \"clientid\",\n  \"client_secret\": \"clientsecret\",\n  \"scope\": \"openid profile email\",\n  \"redirect_uris\": [\n    \"http://localhost:8080\",\n    \"http://localhost:34170\",\n    \"http://localhost:4242\"\n  ]\n}\n</code></pre> <p>Note that the <code>--only-at</code> option can be used with any flow.</p>"},{"location":"usage/oidc-gen/options/#-print","title":"<code>--print</code>","text":"<p>Using this option <code>oidc-gen</code> will read the specified file and print out the decrypted content. You can either pass an account shortname to print out the decrypted account configuration or an absolute filepath (needed if you want to decrypt client configuration files or other files encrypted by <code>oidc-gen</code>).</p>"},{"location":"usage/oidc-gen/options/#-prompt","title":"<code>--prompt</code>","text":"<p>This option can be used to change how <code>oidc-gen</code> prompts the user for information. There are different options available. Allowed values are <code>cli</code>, <code>gui</code>, and <code>none</code>. The default is <code>cli</code>. This is the normal mode as it also was before version 4.0.0. The suer is prompted for information on the command line. When selecting <code>gui</code>, <code>oidc-gen</code> will use graphical pop-up prompts. This requires <code>oidc-agent-prompt</code> to be installed. When <code>none</code> is selected, <code>oidc-gen</code> will not prompt for any information, which requires that the needed information is passed through command line options.</p> <p>Changing the prompt mode to <code>gui</code> will also change the password prompt mode to <code>gui</code> (see <code>--pw-prompt</code>). Changing it to <code>none</code>, will not change the password prompt mode, because this cannot set to <code>none</code>.</p>"},{"location":"usage/oidc-gen/options/#-pub","title":"<code>--pub</code>","text":"<p>When this option is provided, <code>oidc-gen</code> will use a public client. If <code>--manual</code> is not provided, normally a client would be registered dynamically. However, with the <code>--pub</code> option, a preregistered public client is used. Preregistered public clients are listed in <code>/etc/oidc-agent/pubclients.config</code>. If the <code>--manual</code> option is specified this allows usage of a public client that was registered manually (the <code>client_secret</code> parameter will be optional).</p> <p>This option is also required to update an account configuration that uses a public client.</p>"},{"location":"usage/oidc-gen/options/#-pw-cmd","title":"<code>--pw-cmd</code>","text":"<p>By default <code>oidc-gen</code> will prompt the user for an encryption password when it needs to encrypt or decrypt an account configuration. The option <code>--pw-cmd</code> can be used to provide a command that will print the needed encryption password to <code>stdout</code>. Then <code>oidc-gen</code> can obtain the password from that command instead of prompting the user.</p>"},{"location":"usage/oidc-gen/options/#-pw-env","title":"<code>--pw-env</code>","text":"<p>By default <code>oidc-gen</code> will prompt the user for an encryption password when it needs to encrypt or decrypt an account configuration. The option <code>--pw-env</code> can be used to provide the encryption password via an environment variable. The name of the environment variable can be passed to <code>--pw-env</code>. If this option is used without an argument the encryption password is read from the environment variable <code>OIDC_ENCRYPTION_PW</code>.</p>"},{"location":"usage/oidc-gen/options/#-pw-file","title":"<code>--pw-file</code>","text":"<p>By default <code>oidc-gen</code> will prompt the user for an encryption password when it needs to encrypt or decrypt an account configuration. The option <code>--pw-file</code> can be used to provide the path to a file that contains the needed encryption password. Then <code>oidc-gen</code> can obtain the password from that file.</p>"},{"location":"usage/oidc-gen/options/#-pw-gpg","title":"<code>--pw-gpg</code>","text":"<p>The <code>--pw-gpg</code>, <code>--pw-pgp</code>, <code>--gpg</code>, or <code>--pgp</code> option can be used to indicate that PGP encryption utilizing <code>gpg-agent</code> should be used. The option takes a gpg key id and this key will be used for encryption. By using this approach one does not have to enter a password or pass it with one of the other <code>--pw-*</code> options whenever the file must be decrypted/encrypted. With PGP encryption, oidc-agent can utilize the <code>gpg-agent</code> for encryption. As long as the key is loaded in the <code>gpg-agent</code>, no password must be entered.</p> <p>This approach is very useful with providers where the refresh tokens changes regularly, but it is also very practical for all other providers.</p>"},{"location":"usage/oidc-gen/options/#-pw-prompt","title":"<code>--pw-prompt</code>","text":"<p>This option can be used to change how <code>oidc-gen</code> prompts the user for the encryption password. Possible values are <code>cli</code> and <code>gui</code>. The default is <code>cli</code>. <code>gui</code> requires oidc-agent-prompt to be installed.</p>"},{"location":"usage/oidc-gen/options/#-reauthenticate","title":"<code>--reauthenticate</code>","text":"<p>This option can be used to update an existing account configuration file with a new refresh token. Useful if - for some reason - the refresh token is not valid anymore. One could also use <code>--manual</code> to update an existing account configuration; however if no other information has to be changed the <code>--reauthenticate</code> option is easier.</p>"},{"location":"usage/oidc-gen/options/#-rename","title":"<code>--rename</code>","text":"<p>This option can be used to rename an existing account configuration file. It is not enough to simply rename the file in the file system. One could also use <code>--manual</code> to update an existing account configuration; however if no other information has to be changed the <code>--rename</code> option is easier.</p>"},{"location":"usage/oidc-gen/options/#-update","title":"<code>--update</code>","text":"<p>This option can be used to update the encryption and / or file format for a file generated by oidc-gen. It will decrypt and re-encrypt the file content, therefore updating encryption and file format to the newest version. This option can also be used to encrypt plain text files, e.g. a client configuration that was downloaded from the OpenID Provider - do not use it as a general file encryption tool. The passed parameter can be an absolute path or the name of a file placed in oidc-dir (e.g. an account configuration short name).</p>"},{"location":"usage/oidc-gen/options/#-at","title":"<code>--at</code>","text":"<p>The <code>--at</code> option is used during dynamic client registration. If the registration endpoint is protected and can only accessed with proper authentication, the user has to pass the token used for authentication to the <code>--at</code> option.</p>"},{"location":"usage/oidc-gen/options/#-aud","title":"<code>--aud</code>","text":"<p>The <code>--aud</code> option can be used to set the audience of obtained access tokens. Protected resources should not accept a token if they are not listed as audience. Therefore, this is a mechanism to restrict the usage of an access token to certain resources.</p> <p>The audience of individual access tokens can also be set with <code>oidc-token --aud</code>.</p> <p>See <code>oidc-token --aud</code> for more information.</p>"},{"location":"usage/oidc-gen/options/#-client-id","title":"<code>--client-id</code>","text":"<p>The <code>--client-id</code> option can be used to set the client id that should be used.</p>"},{"location":"usage/oidc-gen/options/#-client-secret","title":"<code>--client-secret</code>","text":"<p>The <code>--client-secrete</code> option can be used to set the client secret that should be used.</p>"},{"location":"usage/oidc-gen/options/#-cnid","title":"<code>--cnid</code>","text":"<p>The <code>--cnid</code> option can be used to set an additional client name identifier. This might be useful in the case a user has multiple machines that run <code>oidc-agent</code> and he configures new account configurations for each machine. However, they should have the same shortname on all machines. While this is possible, the clientname for all of these clients will be of the form <code>oidc-agent:&lt;shortname&gt;</code>. With the same shortname the clients cannot be distinguished easily in a web interface provided by the OpenID Provider. Most provider allow to access a list with authorized applications. If a user has an account configuration for <code>example</code> on two different machines, he will see the <code>oidc-agent:example</code> entry twice and cannot identify which entry belongs to which machine. However, this is possible using the <code>--cnid</code> option. This option allows the user to specify an additional component of the client name <code>oidc-agent:&lt;shortname&gt;-&lt;cnid&gt;</code>. A user could use for example the hostname of the machine. Then there are two different applications listed in the provider's web interface and the clients can be matched to the correct machine where that client is indeed used.</p>"},{"location":"usage/oidc-gen/options/#-configuration-endpoint","title":"<code>--configuration-endpoint</code>","text":"<p>The <code>--config-endpoint</code> or <code>--configuration-endpoint</code> or <code>--discovery-endpoint</code> option can be used to manually set the endpoint where the provider publishes its metadata. Usually, this is a well-known location and does not need to be set. For providers that do not have a configuration endpoint this option is useful. In particular a uri of the form <code>file:///path/to/file</code> can be used to point to a local file where the required information is stored in the json format and according to the discovery specification. If the configuration endpoint is provided the issuer url is not required anymore - but it still can be provided.</p>"},{"location":"usage/oidc-gen/options/#-dae","title":"<code>--dae</code>","text":"<p>The <code>--dae</code> option explicitly sets the <code>device authorization endpoint uri</code>. When performing the device flow <code>oidc-agent</code> has to send information to this endpoint. Usually oidc-agent can obtain this uri from the provider's configuration endpoint. However, if the provider does not publish its device authorization endpoint uri at its configuration endpoint, the user has to tell <code>oidc-agent</code> where the device authorization endpoint can be found. Therefore, the uri has to be passed to the <code>--dae</code> option. Check the documentation about providers for information if you need this option with your provider.</p>"},{"location":"usage/oidc-gen/options/#-issuer","title":"<code>--issuer</code>","text":"<p>The <code>--issuer</code> option can be used to set the issuer url that should be used.</p>"},{"location":"usage/oidc-gen/options/#-mytoken-url","title":"<code>--mytoken-url</code>","text":"<p>The <code>--mytoken-url</code> option can be used to set the mytoken instance that should be used. This also has the effect that a mytoken account configuration is created instead of a normal OIDC one. Note, that a issuer url still has to be given. Please also refer to the <code>--mytoken</code> option.</p>"},{"location":"usage/oidc-gen/options/#-op-password","title":"<code>--op-password</code>","text":"<p>The <code>--op-password</code> option can be used to set the user's password at the OpenID provider. This option only applies when the password flow is used. Note that it is not recommended to use the password flow in general; even more it is not recommended to set the password from the command line. Please use prompting for this.</p>"},{"location":"usage/oidc-gen/options/#-op-username","title":"<code>--op-username</code>","text":"<p>The <code>--op-username</code> option can be used to set the user's username at the OpenID provider. This option only applies when the password flow is used.</p>"},{"location":"usage/oidc-gen/options/#-port","title":"<code>--port</code>","text":"<p>This option can be used to set redirect uris. Only the port must be provided and it will result in a redirect uri of the form <code>http://localhost:&lt;port&gt;</code>. This option is a short option for <code>--redirect-uri</code> (only the port has to be provided). Passing <code>--port=1234</code> is equivalent to passing <code>--redirect-uri=http://localhost:1234</code>.</p> <p>For more information see -<code>-redirect-uri</code>.</p>"},{"location":"usage/oidc-gen/options/#-redirect-uri","title":"<code>--redirect-uri</code>","text":"<p>This option can be used to set the redirect uri to be used. This applies to two cases:</p> <ul> <li>When the client was manually registered, the option can be used to pass the registered redirect uris.</li> <li>When the client will be registered dynamically, the option can be used to pass the redirect uris that should be   registered.</li> </ul> <p>On default <code>oidc-agent</code> will register multiple redirect uris when using dynamic client registration. One redirect uri that uses the custom uri scheme <code>edu.kit.data.oidc-agent:/&lt;path&gt;</code> and three redirect uris to <code>localhost</code> using different port numbers. Two of these port numbers are <code>4242</code> and <code>8080</code>; the third port number will be chosen randomly. When starting the webserver <code>oidc-agent</code> will try all of these ports, stopping when the first succeeds. We cannot make any guarantees on the order in which these ports are tried.</p> <p>This might be a problem in environments with restrictions to ports, e.g. containers. In such environments it's useful to use the <code>--redirect-uri</code> or <code>--port</code> option to manually set the port(s) that should be used (<code>oidc-agent</code> will register redirect uris with that port numbers). By using these options one can pass only ports that will be available in the restricted environment. Note that <code>oidc-agent</code> still makes no guarantees about the order in which these ports will be tried.</p>"},{"location":"usage/oidc-gen/options/#-rt","title":"<code>--rt</code>","text":"<p>This option can be used to pass a refresh token that should be used. Because this will use the refresh flow this option implicitly sets <code>--flow=refresh</code>.</p> <p>Note: Refresh tokens are bound to a specific client id. The provided refresh token must be issued for the provided client id.</p>"},{"location":"usage/oidc-gen/options/#-rt-env","title":"<code>--rt-env</code>","text":"<p>Like <code>--rt</code> but reads the refresh token from an environment variable. The name of the environment variable can be passed to <code>--rt-env</code>. If this option is used without an argument the refresh token is read from the environment variable <code>OIDC_REFRESH_TOKEN</code>.</p>"},{"location":"usage/oidc-gen/options/#-scope","title":"<code>--scope</code>","text":"<p>The <code>--scope</code> option can be used to set the scopes that should be used with this account configuration. Multiple scopes can be provided as a space separated list or by using the option multiple times. Pass <code>max</code> to use all available scopes for this provider.</p>"},{"location":"usage/oidc-gen/options/#-scope-all-and-scope-max","title":"<code>--scope-all</code> and <code>--scope-max</code>","text":"<p>The <code>--scope-all</code> and <code>--scope-max</code> options can be used to set the scopes that should be used with this account configuration to the maximum. I.e. this means that all scopes supported by the provider will be used. When using a public client all scopes available for that client will be used.</p>"},{"location":"usage/oidc-keychain/","title":"oidc-keychain","text":"<p><code>oidc-keychain</code> enables re-using <code>oidc-agent</code> between login sessions. Since version <code>4.3.0</code> oidc-agent-service is used to utilize a running agent across sessions. Still accounts are loaded when needed (using <code>oidc-add</code>), and the <code>OIDCD_PID</code> and <code>OIDC_SOCK</code> environment variables are set.  <code>oidc-keychain</code> is commonly used inside <code>.bash_profile</code> or similar to start <code>oidc-agent</code> when needed.</p> <p>For example this line in <code>.bash_profile</code></p> <pre><code>eval `oidc-keychain --accounts &lt;shortname&gt;`\n</code></pre> <p>starts <code>oidc-agent</code> when needed, loads the  account if it isn't already loaded, and sets the oidc environment variables so other applications can locate the agent."},{"location":"usage/oidc-keychain/general/","title":"General Usage","text":""},{"location":"usage/oidc-keychain/general/#general-usage","title":"General Usage","text":"<pre><code>Usage: oidc-keychain [-?|--help|--usage|-V|--version] [-k|--kill]\n   or: oidc-keychain [oidc-agent options] [--accounts ACCOUNT ...]\n</code></pre> <p>Any given oidc-agent options will get passed to oidc-agent when it needs to be started.</p> <p>See Detailed Information About All Options for more information.</p>"},{"location":"usage/oidc-keychain/options/","title":"Detailed Information About All Options","text":""},{"location":"usage/oidc-keychain/options/#detailed-information-about-all-options","title":"Detailed Information About All Options","text":"<ul> <li><code>--accounts</code></li> <li><code>--kill</code></li> </ul>"},{"location":"usage/oidc-keychain/options/#-accounts","title":"<code>--accounts</code>","text":"<p>Loads the given accounts into the agent if not already loaded.</p>"},{"location":"usage/oidc-keychain/options/#-kill","title":"<code>--kill</code>","text":"<p>Kills the currently running agent.</p>"},{"location":"usage/oidc-token/","title":"oidc-token","text":"<p>oidc-token is an example agent client that can be used to easily obtain an OIDC access token from the command line.</p>"},{"location":"usage/oidc-token/general/","title":"General Usage","text":""},{"location":"usage/oidc-token/general/#general-usage","title":"General Usage","text":"<p>To obtain an access token for a specific account configuration you have to pass the shortname to oidc-token: <code>oidc-token &lt;shortname&gt;</code> This will print the access token to <code>stdout</code>. This enables several use cases:</p> <ul> <li>print the token to <code>stdout</code> and copy-paste it where you need it.</li> <li>put the token in an environment variable: <code>export OIDC_AT=`oidc-token shortname`</code>.</li> <li>use the <code>-c</code> (or similar) option to put the token into an environment   variable: <code>eval `oidc-token -c &lt;shortname&gt;`</code></li> <li>pipe the token to a programm that reads a token from <code>stdin</code>: <code>oidc-token shortname | iReadATokenFromStdIn</code>.</li> <li>use the <code>oidc-token</code> directly in the needed   command: <code>curl -H 'Authorization: Bearer `oidc-token shortname`' example.com</code>.<ul> <li>use the <code>--auth-header</code> option to simplify api calls: <code>curl -H \"$(oidc-token shortname)\" example.com</code></li> </ul> </li> </ul> <p>Instead of using <code>oidc-token &lt;shortname&gt;</code> you also can do <code>oidc-token &lt;issuer_url&gt;</code>. While usually using the shortname is shorter there are also use cases for using the issuer url.</p> <p>See also Tips for more usage tips.</p> <pre><code>Usage: oidc-token [OPTION...] ACCOUNT_SHORTNAME | ISSUER_URL\n</code></pre> <p>See Detailed Information About All Options for more information.</p>"},{"location":"usage/oidc-token/options/","title":"Detailed Information About All Options","text":""},{"location":"usage/oidc-token/options/#detailed-information-about-all-options","title":"Detailed information about all options","text":"<ul> <li><code>--time</code></li> <li>Information Available from oidc-token<ul> <li><code>--all</code></li> <li><code>--env</code></li> <li><code>--expires-at</code></li> <li><code>--issuer</code></li> <li><code>--token</code></li> </ul> </li> <li><code>--auth-header</code></li> <li><code>--bearer</code></li> <li><code>--force-new</code></li> <li><code>--aud</code></li> <li><code>--id-token</code></li> <li><code>--mytoken</code></li> <li><code>--name</code></li> <li><code>--scope</code></li> </ul>"},{"location":"usage/oidc-token/options/#-time","title":"<code>--time</code>","text":"<p>Using the <code>--time</code> option you can specify the minimum time (given in seconds) the access token should be valid. If this options is not given, it will be zero, therefore no guarantees about the validity of the token can be made, i.e. the access token might not be valid anymore even when used immediately. The agent will check if the cached token is still valid for the specified time and return it if that is the case. Otherwise a new access token is issued and returned. oidc-agent guarantees that the token will be valid the specified time, if it is below the provider's maximum, otherwise it will be the provider's maximum (i.e. if <code>--time=3600</code> is used, but for that provider access tokens are only valid for 5 minutes, the returned token will be valid for those 5 minutes).</p>"},{"location":"usage/oidc-token/options/#information-available-from-oidc-token","title":"Information Available from oidc-token","text":"<p>On default <code>oidc-token</code> prints the requested access token to <code>stdout</code>. But <code>oidc-token</code> can provide more information, like the issuer url of the issuer for which the access token is valid. This information might be required by other applications, so that they know where the token has to be used. Additionally the time when the token expires (as the number of seconds since the Epoch, <code>1970-01-01 00:00:00 +0000 (UTC)</code>) can also be returned. This enables an application to cache the token for the time it is valid.</p> <p>There are multiple ways to obtain all of this information or only a subset using <code>oidc-token</code>: In the following we will describe different command line options that can be used to control the returned information. For additional examples refer to Tips.</p> <ul> <li>Use the <code>-a</code> option to get all information: oidc-token will print all information to <code>stdout</code>. One piece of   information per line:</li> <li>Use environment variables: Using the <code>-c</code> option oidc-token will print out shell commands that can be evaluated to set   environment variables (name of the environment variables are defaults):</li> </ul> <p><code>eval `oidc-token &lt;short_name&gt; -c`</code> will automatically set these variables. Using the <code>-o</code>, <code>-i</code>, and <code>-e</code> option   the name of the exported variables can be customized.</p>"},{"location":"usage/oidc-token/options/#-all","title":"<code>--all</code>","text":"<p>To get all information available and print it to <code>stdout</code> use the <code>--all</code> option. Each line contains one piece of information:</p> <ul> <li>First line: access token</li> <li>Second line: issuer url</li> <li>Third line: expiration time</li> </ul> <p>This way it is easy to parse on the command line or by other applications. However, on the command line you might prefer the usage of environment variables (<code>--env</code>).</p>"},{"location":"usage/oidc-token/options/#-env","title":"<code>--env</code>","text":"<p>Instead of printing all information directly to <code>stdout</code> the <code>--env</code> option prints out shell commands that will put all information into environment variables. Therefore, it can be used to easily make all information available in the current terminal: <code>eval `oidc-token -c &lt;shortname&gt;`</code></p> <p>The names of the used environment variables are as followed:</p> <ul> <li><code>OIDC_AT</code>: access token</li> <li><code>OIDC_ISS</code>: issuer url</li> <li><code>OIDC_EXP</code>: expiration time</li> </ul> <p>The name of the environment variables can be changed with the <code>--expires-at</code>, <code>--issuer</code>, and <code>--token</code> options.</p>"},{"location":"usage/oidc-token/options/#-expires-at","title":"<code>--expires-at</code>","text":"<p>The <code>--expires-at</code> option can be used to request the time when the access token expires (given in the number of seconds since the Epoch, <code>1970-01-01 00:00:00 +0000 (UTC)</code>). It optionally takes the name of an environment variable as an argument. If this argument is not passed and non of the <code>--issuer</code> and <code>--token</code> options are passed, the expiration time is printed to <code>stdout</code>. Otherwise shell commands are printed that will export the value into an environment variable. The name of this variable can be set with the passed argument and defaults to <code>OIDC_EXP</code>.</p> <p>Examples:</p> <pre><code>oidc-token &lt;shortname&gt; -e               # prints the expiration time\neval `oidc-token &lt;shortname&gt; -oe`       # puts the access token and expiration time into OIDC_AT and OIDC_EXP, resp.\neval `oidc-token &lt;shortname&gt; -e AT_EXP` # puts the expiration time into AT_EXP\n</code></pre>"},{"location":"usage/oidc-token/options/#-issuer","title":"<code>--issuer</code>","text":"<p>The <code>--issuer</code> option can be used to request the issuer url of the issuer that issued the access token. It optionally takes the name of an environment variable as an argument. If this argument is not passed and non of the <code>--expires-at</code> and <code>--token</code> options are passed, the issuer url is printed to <code>stdout</code>. Otherwise shell commands are printed that will export the value into an environment variable. The name of this variable can be set with the passed argument and defaults to <code>OIDC_ISS</code>.</p> <p>Examples:</p> <pre><code>oidc-token &lt;shortname&gt; -i               # prints the issuer url\neval `oidc-token &lt;shortname&gt; -oi`       # puts the access token and issuer url into OIDC_AT and OIDC_ISS, resp.\neval `oidc-token &lt;shortname&gt; -i ISSUER` # puts the issuer url into ISSUER\n</code></pre>"},{"location":"usage/oidc-token/options/#-token","title":"<code>--token</code>","text":"<p>The <code>--token</code> option can be used to request the access token. It optionally takes the name of an environment variable as an argument. If this argument is not passed and non of the <code>--expires-at</code> and <code>--token</code> options are passed, the access token is printed to <code>stdout</code> (same as when no options are provided). Otherwise shell commands are printed that will export the value into an environment variable. The name of this variable can be set with the passed argument and defaults to <code>OIDC_AT</code>.</p> <p>Examples:</p> <pre><code>eval `oidc-token &lt;shortname&gt; -oi`      # puts the access token and issuer url into OIDC_AT and OIDC_ISS, resp.\neval `oidc-token &lt;shortname&gt; -o TOKEN` # puts the issuer url into TOKEN\n</code></pre>"},{"location":"usage/oidc-token/options/#-auth-header","title":"<code>--auth-header</code>","text":"<p>The <code>--auth-header</code> or <code>--auth</code> option can be used to print the token included in an authorization header for usage with api calls. This will output the following: <code>Authorization: Bearer &lt;token&gt;</code> without a newline at the end.</p> <p>Example call with integration into a <code>curl</code> command:</p> <pre><code>curl https://example.com/api -H \"$(oidc-token --bearer &lt;shortname&gt;)\"\n</code></pre>"},{"location":"usage/oidc-token/options/#-bearer","title":"<code>--bearer</code>","text":"<p>The <code>--bearer</code> option can be used to print the token in the bearer \"format\", to be used with authorization headers. This will output the following: <code>Bearer &lt;token&gt;</code> without a newline at the end.</p> <p>Example call with integration into a <code>curl</code> command:</p> <pre><code>curl https://example.com/api -H \"Authorization: $(oidc-token --bearer &lt;shortname&gt;)\"\n</code></pre> <p>There is also the <code>--auth-header</code> option that might be useful.</p>"},{"location":"usage/oidc-token/options/#-force-new","title":"<code>--force-new</code>","text":"<p>The <code>--force-new</code> option can be used to force oidc-agent to return a new access token. This will return an access token that will be valid as long as possible and it substitutes the cached access token.</p>"},{"location":"usage/oidc-token/options/#-aud","title":"<code>--aud</code>","text":"<p>The <code>--aud</code> option can be used to request an access token with the specified audience. Protected resources should not accept a token if they are not listed as audience. Therefore, this is a mechanism to restrict the usage of an access token to certain resources.</p> <p>Note that the format of providing multiple audiences might be different for different providers, since this parameter is currently not widely supported by providers and a clear standard is not yet established. We currently only know about one provider that supports this parameter (IAM); there multiple audiences can be requested as a space separated string.</p> <p>Example:</p> <pre><code>oidc-token &lt;shortname&gt; --aud=\"foo bar\"\n</code></pre>"},{"location":"usage/oidc-token/options/#-id-token","title":"<code>--id-token</code>","text":"<p>The <code>--id-token</code> option can be used to request an id token instead of an access token. Note that id tokens should not be passed to other applications as authorization. This option is only mend as a toll for development, it should not be used by other applications. Therefore, this option requires user approval, unless the account configuration was loaded with <code>oidc-add --always-allow-idtoken</code> or the <code>--always-allow-idtoken</code> option was specific on agent startup.</p>"},{"location":"usage/oidc-token/options/#-mytoken","title":"<code>--mytoken</code>","text":"<p>The long options <code>--mytoken</code> and <code>--MT</code> as well as the short option <code>-m</code> can be used to request and obtain a mytoken instead of an OIDC access token. The option takes a mytoken profile as an optional parameter. With the mytoken profile one can specify the desired properties of the requested mytoken.</p>"},{"location":"usage/oidc-token/options/#-scope","title":"<code>--scope</code>","text":"<p>The <code>--scope</code> option can be used to specify the scopes of the requested token. The returned access token will only be valid for these scope values. Multiple scopes can be provided as a space separated list or by using the option multiple times. All passed scope values have to be registered for this client (and refresh token); upscoping is therefore not possible.</p> <p>Example:</p> <pre><code>oidc-token &lt;shortname&gt; -s openid -s profile\n</code></pre> <p>If this option is omitted the default scope is used.</p>"},{"location":"usage/oidc-token/options/#-name","title":"<code>--name</code>","text":"<p>The <code>--name</code> option is intended for other applications and scripts that call <code>oidc-token</code> to obtain an access token. The option sets the passed name as the application name that requests the access token. This name might be displayed to the user, e.g. when the account first has to be loaded. Setting the correct application name allows the user to decide on correct information.</p> <p>Example:</p> <pre><code>oidc-token &lt;shortname&gt; --name=\"My custom script\"\n</code></pre>"},{"location":"usage/oidc-tokensh/general/","title":"General Usage","text":""},{"location":"usage/oidc-tokensh/general/#general-usage","title":"General Usage","text":"<p><code>oidc-tokensh</code> is a tool to ensure that valid Access Tokens are always available in a location such as <code>$XDG_RUNTIME_DIR/bt_u$ID</code>, <code>/tmp/bt_u$ID</code>, or <code>$BEARER_TOKEN_FILE</code> just as specified https://zenodo.org/records/3937438.</p> <p><code>oidc-tokensh</code> provides an \"almost drop-in replacement\" for <code>httokensh</code> of the htgettoken tool package.</p> <p><code>oidc-tokensh</code> starts a new shell through <code>oidc-agent</code> and prompts the user for the passphrase of the <code>oidc-agent shortname</code> that will be loaded.</p> <p>The user may specify the <code>shortname</code> with the <code>--oidc &lt;shortname&gt;</code> option. If only one <code>shortname</code> is configured, this one will be used by default.</p> <pre><code>Usage: oidc-tokensh [--oidc &lt;shortname&gt;] [-- &lt;command&gt;]\n</code></pre> <p>See Detailed Information About All Options for more information.</p>"},{"location":"usage/oidc-tokensh/options/","title":"Detailed Information About All Options","text":""},{"location":"usage/oidc-tokensh/options/#detailed-information-about-all-options","title":"Detailed Information About All Options","text":"<ul> <li><code>--oidc &lt;name&gt;|&lt;OP-url&gt;</code></li> <li><code>--minsecs &lt;seconds&gt;</code></li> <li><code>-o|--outfile &lt;file&gt;</code></li> <li><code>-v|--verbose</code></li> <li><code>-- &lt;command&gt;</code></li> </ul>"},{"location":"usage/oidc-tokensh/options/#-oidc","title":"<code>--oidc</code>","text":"<p>This option is used to specify the <code>shortname</code> of an <code>oidc-agent</code> configuration. If only one agent configuration is defined, this option may be skipped.</p>"},{"location":"usage/oidc-tokensh/options/#-minsecs","title":"<code>--minsecs</code>","text":"<p>Specify the minimum number of seconds that the Access Token should still be valid for.</p>"},{"location":"usage/oidc-tokensh/options/#-outfile","title":"<code>--outfile</code>","text":"<p>Specify alternative file for storing the Access Token.</p>"},{"location":"usage/oidc-tokensh/options/#-verbose","title":"<code>--verbose</code>","text":"<p>Show debug output</p>"},{"location":"usage/oidc-tokensh/options/#-command","title":"<code>-- &lt;command&gt;</code>","text":"<p>Instead of the default shell, you can specify any other shell-like command here. This is useful to specify your favourite shell.</p>"},{"location":"windows/","title":"oidc-agent on Windows","text":"<p>oidc-agent can be used on Windows (usually) in the same way as on linux.</p> <p>oidc-agent can be started by simply calling <code>oidc-agent</code> no <code>eval</code> or <code>oidc-agent-service</code> is needed. The agent can be found from any terminal without all of this.</p>"},{"location":"windows/installation/","title":"Installation","text":""},{"location":"windows/installation/#installation","title":"Installation","text":"<p>Please see Installation.</p>"}]}